import{_ as n,i as t,o as e,ar as a,j as s,aO as l,aP as p,aQ as h,aR as o}from"./chunks/framework.lk4jPI36.js";const m=JSON.parse('{"title":"Test Annotations | Guide","description":"","frontmatter":{"title":"Test Annotations | Guide","outline":"deep"},"headers":[],"relativePath":"guide/test-annotations.md","filePath":"guide/test-annotations.md","lastUpdated":1758986088000}'),r={name:"guide/test-annotations.md"};function k(d,i,c,g,E,y){return e(),t("div",null,i[0]||(i[0]=[a(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/test-annotations.md for this page in Markdown format</div><h1 id="test-annotations" tabindex="-1">Test Annotations <a class="header-anchor" href="#test-annotations" aria-label="Permalink to “Test Annotations”">​</a></h1><p>Vitest supports annotating your tests with custom messages and files via the <a href="/guide/test-context.html#annotate"><code>context.annotate</code></a> API. These annotations will be attached to the test case and passed down to reporters in the <a href="/advanced/api/reporters.html#ontestannotate"><code>onTestAnnotate</code></a> hook.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this is my test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this should</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ve errored&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTestSpecificFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> annotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;creates a file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { body: file })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>The <code>annotate</code> function returns a Promise, so it needs to be awaited if you rely on it somehow. However, Vitest will also automatically await any non-awaited annotation before the test finishes.</p></div><p>Depending on your reporter, you will see these annotations differently.</p><h2 id="built-in-reporters" tabindex="-1">Built-in Reporters <a class="header-anchor" href="#built-in-reporters" aria-label="Permalink to “Built-in Reporters”">​</a></h2><h3 id="default" tabindex="-1">default <a class="header-anchor" href="#default" aria-label="Permalink to “default”">​</a></h3><p>The <code>default</code> reporter prints annotations only if the test has failed:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>  ⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  FAIL  example.test.js &gt; an example of a test with annotation</span></span>
<span class="line"><span>Error: thrown error</span></span>
<span class="line"><span>  ❯ example.test.js:11:21</span></span>
<span class="line"><span>      9 |    await annotate(&#39;annotation 1&#39;)</span></span>
<span class="line"><span>      10|    await annotate(&#39;annotation 2&#39;, &#39;warning&#39;)</span></span>
<span class="line"><span>      11|    throw new Error(&#39;thrown error&#39;)</span></span>
<span class="line"><span>        |          ^</span></span>
<span class="line"><span>      12|  })</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ❯ example.test.js:9:15 notice</span></span>
<span class="line"><span>    ↳ annotation 1</span></span>
<span class="line"><span>  ❯ example.test.js:10:15 warning</span></span>
<span class="line"><span>    ↳ annotation 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯</span></span></code></pre></div><h3 id="verbose" tabindex="-1">verbose <a class="header-anchor" href="#verbose" aria-label="Permalink to “verbose”">​</a></h3><p>In a TTY terminal, the <code>verbose</code> reporter works similarly to the <code>default</code> reporter. However, in a non-TTY environment, the <code>verbose</code> reporter will also print annotations after every test.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>✓ example.test.js &gt; an example of a test with annotation</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ❯ example.test.js:9:15 notice</span></span>
<span class="line"><span>    ↳ annotation 1</span></span>
<span class="line"><span>  ❯ example.test.js:10:15 warning</span></span>
<span class="line"><span>    ↳ annotation 2</span></span></code></pre></div><h3 id="html" tabindex="-1">html <a class="header-anchor" href="#html" aria-label="Permalink to “html”">​</a></h3><p>The HTML reporter shows annotations the same way the UI does. You can see the annotation on the line where it was called. At the moment, if the annotation wasn&#39;t called in a test file, you cannot see it in the UI. We are planning to support a separate test summary view where it will be visible.</p>`,15),s("img",{alt:"Vitest UI","img-light":"",src:l},null,-1),s("img",{alt:"Vitest UI","img-dark":"",src:p},null,-1),a(`<h3 id="junit" tabindex="-1">junit <a class="header-anchor" href="#junit" aria-label="Permalink to “junit”">​</a></h3><p>The <code>junit</code> reporter lists annotations inside the testcase&#39;s <code>properties</code> tag. The JUnit reporter will ignore all attachments and will print only the type and the message.</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> classname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;basic/example.test.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;an example of a test with annotation&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.14315&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;notice&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;the message of the annotation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">testcase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="github-actions" tabindex="-1">github-actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to “github-actions”">​</a></h3><p>The <code>github-actions</code> reporter will print the annotation as a <a href="https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#setting-a-notice-message" target="_blank" rel="noreferrer">notice message</a> by default. You can configure the <code>type</code> by passing down the second argument as <code>notice</code>, <code>warning</code> or <code>error</code>. If type is none of these, Vitest will show the message as a notice.</p>`,5),s("img",{alt:"GitHub Actions","img-light":"",src:h},null,-1),s("img",{alt:"GitHub Actions","img-dark":"",src:o},null,-1),a(`<h3 id="tap" tabindex="-1">tap <a class="header-anchor" href="#tap" aria-label="Permalink to “tap”">​</a></h3><p>The <code>tap</code> and <code>tap-flat</code> reporters print annotations as diagnostic messages on a new line starting with a <code>#</code> symbol. They will ignore all attachments and will print only the type and message:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>ok 1 - an example of a test with annotation # time=143.15ms</span></span>
<span class="line"><span>    # notice: the message of the annotation</span></span></code></pre></div>`,3)]))}const b=n(r,[["render",k]]);export{m as __pageData,b as default};
