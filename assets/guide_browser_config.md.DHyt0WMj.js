import{_ as r}from"./chunks/NonProjectOption.DqDJezAG.js";import{_ as p,b as k,i as o,o as d,ar as e,j as a,M as i,g as t,w as l}from"./chunks/framework.lk4jPI36.js";const C=JSON.parse('{"title":"浏览器配置参考","description":"","frontmatter":{},"headers":[],"relativePath":"guide/browser/config.md","filePath":"guide/browser/config.md","lastUpdated":1758986088000}'),c={name:"guide/browser/config.md"},g={id:"browser-name",tabindex:"-1"},E={id:"browser-provideroptions",tabindex:"-1"};function y(F,s,b,u,f,w){const h=r,n=k("Badge");return d(),o("div",null,[s[16]||(s[16]=e(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/browser/config.md for this page in Markdown format</div><h1 id="浏览器配置参考" tabindex="-1">浏览器配置参考 <a class="header-anchor" href="#浏览器配置参考" aria-label="Permalink to “浏览器配置参考”">​</a></h1><p>我们可以通过更新 <a href="/config/">配置文件</a> 中的 <code>test.browser</code> 字段来更改浏览器配置。一个简单的配置文件示例如下：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vitest.config.ts">vitest.config.ts</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      enabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;playwright&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          browser: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chromium&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          setupFile: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./chromium-setup.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div><p>请参阅 <a href="/config/">&quot;配置参考&quot;</a> 文章以获取不同的配置示例。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>此页面上列出的 <em>所有选项</em> 都位于配置中的 <code>test</code> 属性内：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vitest.config.js">vitest.config.js</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div></div><h2 id="browser-enabled" tabindex="-1">browser.enabled <a class="header-anchor" href="#browser-enabled" aria-label="Permalink to “browser.enabled”">​</a></h2><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认值:</strong> <code>false</code></li><li><strong>CLI:</strong> <code>--browser</code>, <code>--browser.enabled=false</code></li></ul><p>默认情况下在浏览器中运行所有测试。请注意，<code>--browser</code> 仅在我们至少有一个 <a href="#browser-instances"><code>browser.instances</code></a> 项时有效。</p><h2 id="browser-instances" tabindex="-1">browser.instances <a class="header-anchor" href="#browser-instances" aria-label="Permalink to “browser.instances”">​</a></h2><ul><li><strong>类型:</strong> <code>BrowserConfig</code></li><li><strong>默认值:</strong> <code>[{ browser: name }]</code></li></ul><p>定义多个浏览器设置。每个配置必须至少有一个 <code>browser</code> 字段。配置支持我们的提供者配置：</p><ul><li><a href="/guide/browser/playwright.html">配置 Playwright</a></li><li><a href="/guide/browser/webdriverio.html">配置 WebdriverIO</a></li></ul><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>为了在使用内置提供者时获得更好的类型安全性，我们应该在 <a href="/config/">配置文件</a> 中引用以下类型之一（针对我们使用的提供者）：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/playwright&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/webdriverio&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre></div></div>`,14)),a("p",null,[s[0]||(s[0]=i("除此之外，我们还可以指定大多数 ",-1)),s[1]||(s[1]=a("a",{href:"/config/"},"项目选项",-1)),s[2]||(s[2]=i("（未标记为 ",-1)),t(h),s[3]||(s[3]=i(" 图标的选项）和一些 ",-1)),s[4]||(s[4]=a("code",null,"browser",-1)),s[5]||(s[5]=i(" 选项，例如 ",-1)),s[6]||(s[6]=a("code",null,"browser.testerHtmlPath",-1)),s[7]||(s[7]=i("。",-1))]),s[17]||(s[17]=e(`<div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>每个浏览器配置都从根配置继承选项：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vitest.config.ts">vitest.config.ts</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-highlighted" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setupFile: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./root-setup-file.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      enabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      testerHtmlPath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./custom-path.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 将同时具有 &quot;root&quot; 和 &quot;browser&quot; 的设置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          setupFile: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./browser-setup-file.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line highlighted warning"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 隐式具有根配置中的 &quot;testerHtmlPath&quot;</span></span>
<span class="line highlighted warning"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // testerHtmlPath: &#39;./custom-path.html&#39;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div><p>在开发过程中，Vitest 仅支持一个 <a href="#browser-headless">非无头</a> 配置。我们可以通过在配置中指定 <code>headless: false</code>，或提供 <code>--browser.headless=false</code> 标志，或使用 <code>--project=chromium</code> 标志过滤项目来限制有头项目。</p><p>有关更多示例，请参阅 <a href="/guide/browser/multiple-setups.html">&quot;多设置&quot; 指南</a>。</p></div><p>可用的 <code>browser</code> 选项列表：</p><ul><li><a href="#browser-headless"><code>browser.headless</code></a></li><li><a href="#browser-locators"><code>browser.locators</code></a></li><li><a href="#browser-viewport"><code>browser.viewport</code></a></li><li><a href="#browser-testerhtmlpath"><code>browser.testerHtmlPath</code></a></li><li><a href="#browser-screenshotdirectory"><code>browser.screenshotDirectory</code></a></li><li><a href="#browser-screenshotfailures"><code>browser.screenshotFailures</code></a></li></ul><p>默认情况下，Vitest 创建一个包含单个元素的数组，该元素使用 <a href="#browser-name"><code>browser.name</code></a> 字段作为 <code>browser</code>。请注意，此行为将在 Vitest 4 中移除。</p><p>在底层，Vitest 将这些实例转换为共享单个 Vite 服务器的单独 <a href="/advanced/api/test-project.html">测试项目</a>，以获得更好的缓存性能。</p>`,5)),a("h2",g,[s[9]||(s[9]=i("browser.name ",-1)),t(n,{type:"danger"},{default:l(()=>s[8]||(s[8]=[i("已弃用",-1)])),_:1,__:[8]}),s[10]||(s[10]=i()),s[11]||(s[11]=a("a",{class:"header-anchor",href:"#browser-name","aria-label":"Permalink to “browser&#46;name 已弃用”"},"​",-1))]),s[18]||(s[18]=e(`<ul><li><strong>类型:</strong> <code>string</code></li><li><strong>CLI:</strong> <code>--browser=safari</code></li></ul><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>此 API 已弃用，并将在 Vitest 4 中移除。请改用 <a href="#browser-instances"><code>browser.instances</code></a> 选项。</p></div><p>在特定浏览器中运行所有测试。不同提供者中的可能选项：</p><ul><li><code>webdriverio</code>: <code>firefox</code>, <code>chrome</code>, <code>edge</code>, <code>safari</code></li><li><code>playwright</code>: <code>firefox</code>, <code>webkit</code>, <code>chromium</code></li><li>自定义：任何将传递给提供者的字符串</li></ul><h2 id="browser-headless" tabindex="-1">browser.headless <a class="header-anchor" href="#browser-headless" aria-label="Permalink to “browser.headless”">​</a></h2><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认值:</strong> <code>process.env.CI</code></li><li><strong>CLI:</strong> <code>--browser.headless</code>, <code>--browser.headless=false</code></li></ul><p>在 <code>headless</code> 模式下运行浏览器。如果我们在 CI 中运行 Vitest，则默认启用此模式。</p><h2 id="browser-isolate" tabindex="-1">browser.isolate <a class="header-anchor" href="#browser-isolate" aria-label="Permalink to “browser.isolate”">​</a></h2><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认值:</strong> <code>true</code></li><li><strong>CLI:</strong> <code>--browser.isolate</code>, <code>--browser.isolate=false</code></li></ul><p>在单独的 iframe 中运行每个测试。</p><h2 id="browser-testerhtmlpath" tabindex="-1">browser.testerHtmlPath <a class="header-anchor" href="#browser-testerhtmlpath" aria-label="Permalink to “browser.testerHtmlPath”">​</a></h2><ul><li><strong>类型:</strong> <code>string</code></li></ul><p>HTML 入口点的路径。可以是相对于项目根目录的路径。此文件将通过 <a href="https://vite.dev/guide/api-plugin#transformindexhtml" target="_blank" rel="noreferrer"><code>transformIndexHtml</code></a> 钩子进行处理。</p><h2 id="browser-api" tabindex="-1">browser.api <a class="header-anchor" href="#browser-api" aria-label="Permalink to “browser.api”">​</a></h2><ul><li><strong>类型:</strong> <code>number | { port?, strictPort?, host? }</code></li><li><strong>默认值:</strong> <code>63315</code></li><li><strong>CLI:</strong> <code>--browser.api=63315</code>, <code>--browser.api.port=1234, --browser.api.host=example.com</code></li></ul><p>配置为浏览器提供代码的 Vite 服务器的选项。不影响 <a href="#api"><code>test.api</code></a> 选项。默认情况下，Vitest 分配端口 <code>63315</code> 以避免与开发服务器冲突，允许我们同时运行两者。</p><h2 id="browser-provider" tabindex="-1">browser.provider <a class="header-anchor" href="#browser-provider" aria-label="Permalink to “browser.provider”">​</a></h2><ul><li><strong>类型:</strong> <code>&#39;webdriverio&#39; | &#39;playwright&#39; | &#39;preview&#39; | string</code></li><li><strong>默认值:</strong> <code>&#39;preview&#39;</code></li><li><strong>CLI:</strong> <code>--browser.provider=playwright</code></li></ul><p>在运行浏览器测试时使用的提供者路径。Vitest 提供了三个提供者，分别是 <code>preview</code>（默认）、<code>webdriverio</code> 和 <code>playwright</code>。自定义提供者应使用 <code>default</code> 导出，并具有以下形状：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  supportsParallelism</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getSupportedBrowsers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  beforeCommand</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awaitable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  afterCommand</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awaitable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getCommandsContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sessionId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  openPage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sessionId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beforeNavigate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getCDPSession</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sessionId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CDPSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  close</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awaitable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  initialize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestProject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserProviderInitializationOptions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awaitable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">ADVANCED API</p><p>自定义提供者 API 高度实验性，并且可能在补丁版本之间发生变化。如果你只需要在浏览器中运行测试，请改用 <a href="#browser-instances"><code>browser.instances</code></a> 选项。</p></div>`,21)),a("h2",E,[s[13]||(s[13]=i("browser.providerOptions ",-1)),t(n,{type:"danger"},{default:l(()=>s[12]||(s[12]=[i("已弃用",-1)])),_:1,__:[12]}),s[14]||(s[14]=i()),s[15]||(s[15]=a("a",{class:"header-anchor",href:"#browser-provideroptions","aria-label":"Permalink to “browser.providerOptions 已弃用”"},"​",-1))]),s[19]||(s[19]=e(`<ul><li><strong>类型:</strong> <code>BrowserProviderOptions</code></li></ul><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>此 API 已弃用，并将在 Vitest 4 中移除。请改用 <a href="#browser-instances"><code>browser.instances</code></a> 选项。</p></div><p>调用 <code>provider.initialize</code> 时传递给提供者的选项。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      providerOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        launch: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          devtools: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>为了在使用内置提供者时获得更好的类型安全性，我们应该在 <a href="/config/">配置文件</a> 中引用以下类型之一（针对我们使用的提供者）：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/playwright&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/webdriverio&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre></div></div><h2 id="browser-ui" tabindex="-1">browser.ui <a class="header-anchor" href="#browser-ui" aria-label="Permalink to “browser.ui”">​</a></h2><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认值:</strong> <code>!isCI</code></li><li><strong>CLI:</strong> <code>--browser.ui=false</code></li></ul><p>是否应将 Vitest UI 注入页面。默认情况下，在开发期间注入 UI iframe。</p><h2 id="browser-viewport" tabindex="-1">browser.viewport <a class="header-anchor" href="#browser-viewport" aria-label="Permalink to “browser.viewport”">​</a></h2><ul><li><strong>类型:</strong> <code>{ width, height }</code></li><li><strong>默认值:</strong> <code>414x896</code></li></ul><p>默认 iframe 的视口。</p><h2 id="browser-locators" tabindex="-1">browser.locators <a class="header-anchor" href="#browser-locators" aria-label="Permalink to “browser.locators”">​</a></h2><p>内置 <a href="/guide/browser/locators.html">浏览器定位器</a> 的选项。</p><h3 id="browser-locators-testidattribute" tabindex="-1">browser.locators.testIdAttribute <a class="header-anchor" href="#browser-locators-testidattribute" aria-label="Permalink to “browser.locators.testIdAttribute”">​</a></h3><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> <code>data-testid</code></li></ul><p>用于通过 <code>getByTestId</code> 定位器查找元素的属性。</p><h2 id="browser-screenshotdirectory" tabindex="-1">browser.screenshotDirectory <a class="header-anchor" href="#browser-screenshotdirectory" aria-label="Permalink to “browser.screenshotDirectory”">​</a></h2><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> 测试文件目录中的 <code>__snapshots__</code></li></ul><p>相对于 <code>root</code> 的屏幕截图目录路径。</p><h2 id="browser-screenshotfailures" tabindex="-1">browser.screenshotFailures <a class="header-anchor" href="#browser-screenshotfailures" aria-label="Permalink to “browser.screenshotFailures”">​</a></h2><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认值:</strong> <code>!browser.ui</code></li></ul><p>如果测试失败，Vitest 是否应截取屏幕截图。</p><h2 id="browser-orchestratorscripts" tabindex="-1">browser.orchestratorScripts <a class="header-anchor" href="#browser-orchestratorscripts" aria-label="Permalink to “browser.orchestratorScripts”">​</a></h2><ul><li><strong>类型:</strong> <code>BrowserScript[]</code></li><li><strong>默认值:</strong> <code>[]</code></li></ul><p>在测试 iframe 初始化之前应注入到编排器 HTML 中的自定义脚本。此 HTML 文档仅设置 iframe，并不实际导入我们的代码。</p><p>脚本的 <code>src</code> 和 <code>content</code> 将由 Vite 插件处理。脚本应提供以下形状：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BrowserScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 如果提供了 &quot;content&quot; 并且类型为 &quot;module&quot;，则这将是其标识符。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 如果我们使用的是 TypeScript，可以在此处添加 \`.ts\` 扩展名。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`injected-\${index}.js\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 要注入的 JavaScript 内容。如果类型为 &quot;module&quot;，则此字符串由 Vite 插件处理。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 我们可以使用 \`id\` 为 Vite 提供文件扩展名的提示。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 脚本的路径。此值由 Vite 解析，因此它可以是节点模块或文件路径。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 脚本是否应异步加载。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 脚本类型。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="browser-testerscripts" tabindex="-1">browser.testerScripts <a class="header-anchor" href="#browser-testerscripts" aria-label="Permalink to “browser.testerScripts”">​</a></h2><ul><li><strong>类型:</strong> <code>BrowserScript[]</code></li><li><strong>默认值:</strong> <code>[]</code></li></ul><div class="danger custom-block"><p class="custom-block-title">DEPRECATED</p><p>此 API 已弃用，并将在 Vitest 4 中移除。请改用 <a href="#browser-testerhtmlpath"><code>browser.testerHtmlPath</code></a> 字段。</p></div><p>在测试环境初始化之前应注入到测试器 HTML 中的自定义脚本。这对于注入 Vitest 浏览器实现所需的 polyfill 非常有用。在几乎所有情况下，建议使用 <a href="#setupfiles"><code>setupFiles</code></a> 代替此选项。</p><p>脚本的 <code>src</code> 和 <code>content</code> 将由 Vite 插件处理。</p><h2 id="browser-commands" tabindex="-1">browser.commands <a class="header-anchor" href="#browser-commands" aria-label="Permalink to “browser.commands”">​</a></h2><ul><li><strong>类型:</strong> <code>Record&lt;string, BrowserCommand&gt;</code></li><li><strong>默认值:</strong> <code>{ readFile, writeFile, ... }</code></li></ul><p>可以从 <code>@vitest/browser/commands</code> 导入的自定义 <a href="/guide/browser/commands.html">命令</a>。</p><h2 id="browser-connecttimeout" tabindex="-1">browser.connectTimeout <a class="header-anchor" href="#browser-connecttimeout" aria-label="Permalink to “browser.connectTimeout”">​</a></h2><ul><li><strong>类型:</strong> <code>number</code></li><li><strong>默认值:</strong> <code>60_000</code></li></ul><p>超时时间（以毫秒为单位）。如果连接到浏览器的时间超过此时间，测试套件将失败。</p><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>这是浏览器与 Vitest 服务器建立 WebSocket 连接所需的时间。在正常情况下，此超时不应被触发。</p></div><h2 id="browser-trackunhandlederrors" tabindex="-1">browser.trackUnhandledErrors <a class="header-anchor" href="#browser-trackunhandlederrors" aria-label="Permalink to “browser.trackUnhandledErrors”">​</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>启用对未捕获错误和异常的跟踪，以便 Vitest 报告。</p><p>如果需要隐藏某些错误，建议使用 <a href="/config/#onunhandlederror"><code>onUnhandledError</code></a> 选项。</p><p>禁用此功能将完全移除所有 Vitest 的错误处理机制，有助于在启用“暂停于异常”功能时进行调试。</p><h2 id="browser-expect" tabindex="-1">browser.expect <a class="header-anchor" href="#browser-expect" aria-label="Permalink to “browser.expect”">​</a></h2><ul><li><strong>Type:</strong> <code>ExpectOptions</code></li></ul><h3 id="browser-expect-tomatchscreenshot" tabindex="-1">browser.expect.toMatchScreenshot <a class="header-anchor" href="#browser-expect-tomatchscreenshot" aria-label="Permalink to “browser.expect.toMatchScreenshot”">​</a></h3><p><a href="/guide/browser/assertion-api.html#tomatchscreenshot"><code>toMatchScreenshot</code></a> 断言的默认选项。 这些选项将应用于所有截图断言。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>为截图断言设置全局默认值，有助于在整个测试套件中保持一致性，并减少单个测试中的重复。如果需要，你仍可以在特定测试用例的断言级别覆盖这些默认值。</p></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      enabled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      expect: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        toMatchScreenshot: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          comparatorName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pixelmatch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          comparatorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            allowedMismatchedPixels: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          resolveScreenshotPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">browserName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">testFileName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            \`custom-screenshots/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFileName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browserName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ext</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>toMatchScreenshot</code> 断言中可用的 <a href="/guide/browser/assertion-api.html#options">所有选项</a> 均可在此配置。此外，还提供了两个路径解析函数：<code>resolveScreenshotPath</code> 和 <code>resolveDiffPath</code>。</p><h4 id="browser-expect-tomatchscreenshot-resolvescreenshotpath" tabindex="-1">browser.expect.toMatchScreenshot.resolveScreenshotPath <a class="header-anchor" href="#browser-expect-tomatchscreenshot-resolvescreenshotpath" aria-label="Permalink to “browser.expect.toMatchScreenshot.resolveScreenshotPath”">​</a></h4><ul><li><strong>Type:</strong> <code>(data: PathResolveData) =&gt; string</code></li><li><strong>Default output:</strong> <code>\`\${root}/\${testFileDirectory}/\${screenshotDirectory}/\${testFileName}/\${arg}-\${browserName}-\${platform}\${ext}\`</code></li></ul><p>一个用于自定义参考截图存储位置的函数。该函数接收一个包含以下属性的对象：</p><ul><li><p><code>arg: string</code></p><p>路径<strong>不含</strong>扩展名，已清理且相对于测试文件。 这来自传递给 <code>toMatchScreenshot</code> 的参数；如果没有参数，将使用自动生成的名称。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;calls \`onClick\`&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMatchScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // arg = &quot;calls-onclick-1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMatchScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo/bar/baz.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// arg = &quot;foo/bar/baz&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(locator).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMatchScreenshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../foo/bar/baz.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// arg = &quot;foo/bar/baz&quot;</span></span></code></pre></div></li><li><p><code>ext: string</code></p><p>截图扩展名，带前导点。</p><p>可以通过传递给 <code>toMatchScreenshot</code> 的参数设置，但如果使用了不支持的扩展名，值将回退为 <code>&#39;.png&#39;</code>。</p></li><li><p><code>browserName: string</code></p><p>实例的浏览器名称。</p></li><li><p><code>platform: NodeJS.Platform</code></p><p><a href="https://nodejs.org/docs/v22.16.0/api/process.html#processplatform" target="_blank" rel="noreferrer"><code>process.platform</code></a> 属性的值。</p></li><li><p><code>screenshotDirectory: string</code></p><p>如果未提供值，则为 <a href="/guide/browser/config.html#browser-screenshotdirectory"><code>browser.screenshotDirectory</code></a>。</p></li><li><p><code>root: string</code></p><p>项目根目录（<a href="/config/#root"><code>root</code></a>）的绝对路径。</p></li><li><p><code>testFileDirectory: string</code></p><p>测试文件的路径，相对于项目的根目录（<a href="/config/#root"><code>root</code></a>）。</p></li><li><p><code>testFileName: string</code></p><p>测试文件的文件名。</p></li><li><p><code>testName: string</code></p><p><a href="/api/#test"><code>test</code></a> 的名称，包括父级 <a href="/api/#describe"><code>describe</code></a> ，已清理。</p></li><li><p><code>attachmentsDir: string</code></p></li></ul><p>如果未提供值，则为 <a href="/config/#attachmentsdir"><code>attachmentsDir</code></a> 提供的默认值。</p><p>例如，按浏览器分组截图：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveScreenshotPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">browserName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">testFileName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/screenshots/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browserName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFileName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ext</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span></code></pre></div><h4 id="browser-expect-tomatchscreenshot-resolvediffpath" tabindex="-1">browser.expect.toMatchScreenshot.resolveDiffPath <a class="header-anchor" href="#browser-expect-tomatchscreenshot-resolvediffpath" aria-label="Permalink to “browser.expect.toMatchScreenshot.resolveDiffPath”">​</a></h4><ul><li><strong>Type:</strong> <code>(data: PathResolveData) =&gt; string</code></li><li><strong>Default output:</strong> <code>\`\${root}/\${attachmentsDir}/\${testFileDirectory}/\${testFileName}/\${arg}-\${browserName}-\${platform}\${ext}\`</code></li></ul><p>一个用于自定义截图比较失败时差异图像存储位置的函数。它接收与 <a href="#browser-expect-tomatchscreenshot-resolvescreenshotpath"><code>resolveScreenshotPath</code></a> 相同的数据对象。</p><p>例如，将差异图像存储在附件的子目录中：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveDiffPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attachmentsDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">browserName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">testFileName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">attachmentsDir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/screenshot-diffs/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testFileName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browserName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ext</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>为了在使用内置提供程序时获得更好的类型安全性，应在你的 <a href="/config/">配置文件</a> 中引用这些类型之一（针对你正在使用的提供程序）。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/playwright&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/webdriverio&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre></div></div>`,64))])}const D=p(c,[["render",y]]);export{C as __pageData,D as default};
