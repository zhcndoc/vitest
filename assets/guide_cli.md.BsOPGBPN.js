import{_ as o,i as a,o as i,ar as r}from"./chunks/framework.lk4jPI36.js";const g=JSON.parse('{"title":"命令行界面 | 指南","description":"","frontmatter":{"title":"命令行界面 | 指南","outline":"deep"},"headers":[],"relativePath":"guide/cli.md","filePath":"guide/cli.md","lastUpdated":1758986088000}'),s={name:"guide/cli.md"};function t(l,e,n,c,d,h){return i(),a("div",null,e[0]||(e[0]=[r(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/cli.md for this page in Markdown format</div><h1 id="命令行界面" tabindex="-1">命令行界面 <a class="header-anchor" href="#命令行界面" aria-label="Permalink to “命令行界面”">​</a></h1><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to “命令”">​</a></h2><h3 id="vitest" tabindex="-1"><code>vitest</code> <a class="header-anchor" href="#vitest" aria-label="Permalink to “vitest”">​</a></h3><p>在当前目录启动 Vitest。在开发环境中会自动进入监听模式，而在 CI 环境（或非交互式终端）中会自动运行测试模式。</p><p>你可以通过添加参数作为过滤器来运行测试文件，比如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foobar</span></span></code></pre></div><p>将仅运行路径中包含 <code>foobar</code> 的测试文件。 此过滤器仅检查包含，不支持正则表达式或 glob 模式（除非你的终端在 Vitest 接收过滤器之前对其进行处理）。</p><p>Since Vitest 3, you can also specify the test by filename and line number:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> basic/foo.test.ts:10</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>请注意，Vitest 需要完整的文件名才能使此功能正常工作。它可以是相对于当前工作目录的路径，也可以是绝对文件路径。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> basic/foo.js:10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ✅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./basic/foo.js:10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ✅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /users/project/basic/foo.js:10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ✅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo:10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ❌</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./basic/foo:10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ❌</span></span></code></pre></div><p>目前，Vitest 还不支持范围：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> basic/foo.test.ts:10,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> basic/foo.test.ts:25</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ✅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> basic/foo.test.ts:10-25</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ❌</span></span></code></pre></div></div><h3 id="vitest-run" tabindex="-1"><code>vitest run</code> <a class="header-anchor" href="#vitest-run" aria-label="Permalink to “vitest run”">​</a></h3><p>在没有监听模式的情况下执行单次运行。</p><h3 id="vitest-watch" tabindex="-1"><code>vitest watch</code> <a class="header-anchor" href="#vitest-watch" aria-label="Permalink to “vitest watch”">​</a></h3><p>运行所有测试套件，监听变化并在变化时重新运行测试。与没有参数的情况下调用 <code>vitest</code> 一样。在 CI 环境中，此命令将回退到 <code>vitest run</code>。</p><h3 id="vitest-dev" tabindex="-1"><code>vitest dev</code> <a class="header-anchor" href="#vitest-dev" aria-label="Permalink to “vitest dev”">​</a></h3><p><code>vitest watch</code> 的别名。</p><h3 id="vitest-related" tabindex="-1"><code>vitest related</code> <a class="header-anchor" href="#vitest-related" aria-label="Permalink to “vitest related”">​</a></h3><p>仅运行涵盖源文件列表的测试。 适用于静态惰性导入(例如, <code>import(&#39;./index.ts&#39;)</code> 或者 <code>import index from &#39;./index.ts</code>)，但不适用于动态导入(例如, <code>import(filepath)</code>)。 所有文件都应该相对于根文件夹。</p><p>与 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer"><code>lint-staged</code></a> 或你的 CI 设置一起运行很有用。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> related</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /src/index.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /src/hello-world.js</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>不要忘记 Vitest 默认情况下以启用的监视模式运行。如果你使用的是 <code>lint-staged</code> 之类的工具，你还应该传递 <code>--run</code> 选项，以便该命令可以正常退出。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title=".lintstagedrc.js">.lintstagedrc.js</span></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;*.{js,ts}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vitest related --run&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h3 id="vitest-bench" tabindex="-1"><code>vitest bench</code> <a class="header-anchor" href="#vitest-bench" aria-label="Permalink to “vitest bench”">​</a></h3><p>仅运行 <a href="/guide/features.html#benchmarking">benchmark</a> 测试，用于比较性能结果。</p><h3 id="vitest-init" tabindex="-1"><code>vitest init</code> <a class="header-anchor" href="#vitest-init" aria-label="Permalink to “vitest init”">​</a></h3><p><code>vitest-init&lt;name&gt;</code> 可以用于设置项目配置。目前，它只支持 <a href="/guide/browser/"><code>browser</code></a> 值：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> browser</span></span></code></pre></div><h3 id="vitest-list" tabindex="-1"><code>vitest list</code> <a class="header-anchor" href="#vitest-list" aria-label="Permalink to “vitest list”">​</a></h3><p><code>vitest list</code> 命令继承所有的 <code>vitest</code> 选项以打印所有匹配测试的列表。此命令忽略 <code>reporters</code> 选项。默认情况下，它将打印与文件过滤器和名称模式匹配的所有测试的名称：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename.spec.ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some-test&quot;</span></span></code></pre></div><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>describe &gt; some-test</span></span>
<span class="line"><span>describe &gt; some-test &gt; test 1</span></span>
<span class="line"><span>describe &gt; some-test &gt; test 2</span></span></code></pre></div><p>你可以传递 <code>--json</code> 标志以 JSON 格式打印测试，也可以将其保存在单独的文件中：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filename.spec.ts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some-test&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --json=./file.json</span></span></code></pre></div><p>如果 <code>--json</code> 标志没有接收到值，它将把 JSON 输出到 stdout 中。</p><p>你还可以传递 <code>--filesOnly</code> 标志来仅打印测试文件：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filesOnly</span></span></code></pre></div><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>tests/test1.test.ts</span></span>
<span class="line"><span>tests/test2.test.ts</span></span></code></pre></div><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to “选项”">​</a></h2><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>Vitest 支持 CLI 参数的 both camel case 和 kebab case 。例如，<code>--passWithNoTests</code> 和 <code>--pass-with-no-tests</code> 都有效（<code>--no-color</code> 和 <code>--inspect-brk</code> 是例外）。</p><p>Vitest 还支持不同的指定值的方式：<code>--reporter dot</code> 和 <code>--reporter=dot</code> 都是有效的。</p><p>如果选项支持值数组，则需要多次传递选项：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reporter=dot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reporter=default</span></span></code></pre></div><p>布尔值选项可以用 <code>no-</code> 前缀来否定。将值指定为 <code>false</code> 也有效：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-api</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --api=false</span></span></code></pre></div></div><h3 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-label="Permalink to “root”">​</a></h3><ul><li><strong>CLI:</strong> <code>-r, --root &lt;path&gt;</code></li><li><strong>Config:</strong> <a href="/config/#root">root</a></li></ul><p>根路径</p><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to “config”">​</a></h3><ul><li><strong>CLI:</strong> <code>-c, --config &lt;path&gt;</code></li></ul><p>配置文件的路径</p><h3 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to “update”">​</a></h3><ul><li><strong>CLI:</strong> <code>-u, --update</code></li><li><strong>Config:</strong> <a href="/config/#update">update</a></li></ul><p>更新快照</p><h3 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to “watch”">​</a></h3><ul><li><strong>CLI:</strong> <code>-w, --watch</code></li><li><strong>Config:</strong> <a href="/config/#watch">watch</a></li></ul><p>启用观察模式</p><h3 id="testnamepattern" tabindex="-1">testNamePattern <a class="header-anchor" href="#testnamepattern" aria-label="Permalink to “testNamePattern”">​</a></h3><ul><li><strong>CLI:</strong> <code>-t, --testNamePattern &lt;pattern&gt;</code></li><li><strong>Config:</strong> <a href="/config/#testnamepattern">testNamePattern</a></li></ul><p>使用符合指定 regexp 模式的运行测试</p><h3 id="dir" tabindex="-1">dir <a class="header-anchor" href="#dir" aria-label="Permalink to “dir”">​</a></h3><ul><li><strong>CLI:</strong> <code>--dir &lt;path&gt;</code></li><li><strong>Config:</strong> <a href="/config/#dir">dir</a></li></ul><p>扫描测试文件的基本目录</p><h3 id="ui" tabindex="-1">ui <a class="header-anchor" href="#ui" aria-label="Permalink to “ui”">​</a></h3><ul><li><strong>CLI:</strong> <code>--ui</code></li><li><strong>Config:</strong> <a href="/config/#ui">ui</a></li></ul><p>启用UI</p><h3 id="open" tabindex="-1">open <a class="header-anchor" href="#open" aria-label="Permalink to “open”">​</a></h3><ul><li><strong>CLI:</strong> <code>--open</code></li><li><strong>Config:</strong> <a href="/config/#open">open</a></li></ul><p>自动打开用户界面（默认值：<code>!process.env.CI</code>）。</p><h3 id="api-port" tabindex="-1">api.port <a class="header-anchor" href="#api-port" aria-label="Permalink to “api.port”">​</a></h3><ul><li><strong>CLI:</strong> <code>--api.port [port]</code></li></ul><p>指定服务器端口。注意，如果端口已被使用，Vite 会自动尝试下一个可用端口，因此这可能不是服务器最终监听的实际端口。如果为 <code>true</code>，将设置为<code>51204</code></p><h3 id="api-host" tabindex="-1">api.host <a class="header-anchor" href="#api-host" aria-label="Permalink to “api.host”">​</a></h3><ul><li><strong>CLI:</strong> <code>--api.host [host]</code></li></ul><p>指定服务器应该监听哪些 IP 地址。设为 <code>0.0.0.0</code> 或 <code>true</code> 则监听所有地址，包括局域网地址和公共地址</p><h3 id="api-strictport" tabindex="-1">api.strictPort <a class="header-anchor" href="#api-strictport" aria-label="Permalink to “api.strictPort”">​</a></h3><ul><li><strong>CLI:</strong> <code>--api.strictPort</code></li></ul><p>设置为 true 时，如果端口已被使用，则退出，而不是自动尝试下一个可用端口</p><h3 id="silent" tabindex="-1">silent <a class="header-anchor" href="#silent" aria-label="Permalink to “silent”">​</a></h3><ul><li><strong>CLI:</strong> <code>--silent [value]</code></li><li><strong>Config:</strong> <a href="/config/#silent">silent</a></li></ul><p>测试的静默控制台输出。使用 <code>&#39;passed-only&#39;</code> 仅查看失败测试的日志。</p><h3 id="hideskippedtests" tabindex="-1">hideSkippedTests <a class="header-anchor" href="#hideskippedtests" aria-label="Permalink to “hideSkippedTests”">​</a></h3><ul><li><strong>CLI:</strong> <code>--hideSkippedTests</code></li></ul><p>隐藏跳过测试的日志</p><h3 id="reporters" tabindex="-1">reporters <a class="header-anchor" href="#reporters" aria-label="Permalink to “reporters”">​</a></h3><ul><li><strong>CLI:</strong> <code>--reporter &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#reporters">reporters</a></li></ul><p>用来选择报告输出格式的类型，可选值包括： default、blob、verbose、dot、json、tap、tap-flat、junit、hanging-process、github-actions。</p><h3 id="outputfile" tabindex="-1">outputFile <a class="header-anchor" href="#outputfile" aria-label="Permalink to “outputFile”">​</a></h3><ul><li><strong>CLI:</strong> <code>--outputFile &lt;filename/-s&gt;</code></li><li><strong>Config:</strong> <a href="/config/#outputfile">outputFile</a></li></ul><p>如果还指定了支持报告程序，则将测试结果写入文件，使用 cac 的点符号表示多个报告程序的单个输出结果 (比如: --outputFile.tap=./tap.txt)</p><h3 id="coverage-provider" tabindex="-1">coverage.provider <a class="header-anchor" href="#coverage-provider" aria-label="Permalink to “coverage.provider”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.provider &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-provider">coverage.provider</a></li></ul><p>选择覆盖范围采集工具， 可用值为: &quot;v8&quot;, &quot;istanbul&quot; and &quot;custom&quot;</p><h3 id="coverage-enabled" tabindex="-1">coverage.enabled <a class="header-anchor" href="#coverage-enabled" aria-label="Permalink to “coverage.enabled”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.enabled</code></li><li><strong>Config:</strong> <a href="/config/#coverage-enabled">coverage.enabled</a></li></ul><p>启用覆盖范围收集。可使用 <code>--coverage</code> CLI 选项覆盖（默认值：<code>false</code>）。</p><h3 id="coverage-include" tabindex="-1">coverage.include <a class="header-anchor" href="#coverage-include" aria-label="Permalink to “coverage.include”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.include &lt;pattern&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-include">coverage.include</a></li></ul><p>作为通配符模式包含在覆盖率中的文件。在使用多个模式时可以指定多次。默认情况下，只包含被测试覆盖的文件。</p><h3 id="coverage-exclude" tabindex="-1">coverage.exclude <a class="header-anchor" href="#coverage-exclude" aria-label="Permalink to “coverage.exclude”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.exclude &lt;pattern&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-exclude">coverage.exclude</a></li></ul><p>覆盖范围中要排除的文件。使用多个扩展名时，可指定多次。</p><h3 id="coverage-clean" tabindex="-1">coverage.clean <a class="header-anchor" href="#coverage-clean" aria-label="Permalink to “coverage.clean”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.clean</code></li><li><strong>Config:</strong> <a href="/config/#coverage-clean">coverage.clean</a></li></ul><p>运行测试前清除覆盖结果（默认值：true）</p><h3 id="coverage-cleanonrerun" tabindex="-1">coverage.cleanOnRerun <a class="header-anchor" href="#coverage-cleanonrerun" aria-label="Permalink to “coverage.cleanOnRerun”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.cleanOnRerun</code></li><li><strong>Config:</strong> <a href="/config/#coverage-cleanonrerun">coverage.cleanOnRerun</a></li></ul><p>重新运行监视时清理覆盖率报告（默认值：true）</p><h3 id="coverage-reportsdirectory" tabindex="-1">coverage.reportsDirectory <a class="header-anchor" href="#coverage-reportsdirectory" aria-label="Permalink to “coverage.reportsDirectory”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.reportsDirectory &lt;path&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-reportsdirectory">coverage.reportsDirectory</a></li></ul><p>将覆盖率报告写入的目录（默认值： ./coverage）</p><h3 id="coverage-reporter" tabindex="-1">coverage.reporter <a class="header-anchor" href="#coverage-reporter" aria-label="Permalink to “coverage.reporter”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.reporter &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-reporter">coverage.reporter</a></li></ul><p>使用的报告。更多信息请访问 <a href="https://vitest.dev/config/#coverage-reporter" target="_blank" rel="noreferrer"><code>coverage.reporter</code></a>。 (默认值: <code>[&quot;text&quot;, &quot;html&quot;, &quot;clover&quot;, &quot;json&quot;]</code>)</p><h3 id="coverage-reportonfailure" tabindex="-1">coverage.reportOnFailure <a class="header-anchor" href="#coverage-reportonfailure" aria-label="Permalink to “coverage.reportOnFailure”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.reportOnFailure</code></li><li><strong>Config:</strong> <a href="/config/#coverage-reportonfailure">coverage.reportOnFailure</a></li></ul><p>即使测试失败也能生成覆盖率报告 (默认值: <code>false</code>)</p><h3 id="coverage-allowexternal" tabindex="-1">coverage.allowExternal <a class="header-anchor" href="#coverage-allowexternal" aria-label="Permalink to “coverage.allowExternal”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.allowExternal</code></li><li><strong>Config:</strong> <a href="/config/#coverage-allowexternal">coverage.allowExternal</a></li></ul><p>收集项目根目录外文件的覆盖范围（默认值：<code>false</code>）</p><h3 id="coverage-skipfull" tabindex="-1">coverage.skipFull <a class="header-anchor" href="#coverage-skipfull" aria-label="Permalink to “coverage.skipFull”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.skipFull</code></li><li><strong>Config:</strong> <a href="/config/#coverage-skipfull">coverage.skipFull</a></li></ul><p>不显示语句、分支和函数覆盖率为 100% 的文件（默认值：<code>false</code>）</p><h3 id="coverage-thresholds-100" tabindex="-1">coverage.thresholds.100 <a class="header-anchor" href="#coverage-thresholds-100" aria-label="Permalink to “coverage.thresholds.100”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.100</code></li><li><strong>Config:</strong> <a href="/config/#coverage-thresholds-100">coverage.thresholds.100</a></li></ul><p>将所有覆盖率阈值设置为 100 的快捷方式（默认值：<code>false</code>）</p><h3 id="coverage-thresholds-perfile" tabindex="-1">coverage.thresholds.perFile <a class="header-anchor" href="#coverage-thresholds-perfile" aria-label="Permalink to “coverage.thresholds.perFile”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.perFile</code></li><li><strong>Config:</strong> <a href="/config/#coverage-thresholds-perfile">coverage.thresholds.perFile</a></li></ul><p>查每个文件的阈值。 <code>--coverage.thresholds.lines</code>, <code>--coverage.thresholds.functions</code>, <code>--coverage.thresholds.branches</code>, <code>--coverage.thresholds.statements</code> 为实际阈值（默认值：<code>false</code>）</p><h3 id="coverage-thresholds-autoupdate" tabindex="-1">coverage.thresholds.autoUpdate <a class="header-anchor" href="#coverage-thresholds-autoupdate" aria-label="Permalink to “coverage.thresholds.autoUpdate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.autoUpdate</code></li><li><strong>Config:</strong> <a href="/config/#coverage-thresholds-autoupdate">coverage.thresholds.autoUpdate</a></li></ul><p>更新阈值： 当当前覆盖率高于配置的阈值时，将 &quot;lines&quot;、&quot;functions&quot;、&quot;branches&quot;和 &quot;statements&quot;更新到配置文件（默认值：<code>false</code>）</p><h3 id="coverage-thresholds-lines" tabindex="-1">coverage.thresholds.lines <a class="header-anchor" href="#coverage-thresholds-lines" aria-label="Permalink to “coverage.thresholds.lines”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.lines &lt;number&gt;</code></li></ul><p>针对代码行的覆盖度阈值设定，请访问 <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbuljs</a> 了解更多信息。此选项不适用于自定义 providers</p><h3 id="coverage-thresholds-functions" tabindex="-1">coverage.thresholds.functions <a class="header-anchor" href="#coverage-thresholds-functions" aria-label="Permalink to “coverage.thresholds.functions”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.functions &lt;number&gt;</code></li></ul><p>针对函数的覆盖度阈值设定，请访问 <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbuljs</a> 了解更多信息。 此选项不适用于自定义 providers</p><h3 id="coverage-thresholds-branches" tabindex="-1">coverage.thresholds.branches <a class="header-anchor" href="#coverage-thresholds-branches" aria-label="Permalink to “coverage.thresholds.branches”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.branches &lt;number&gt;</code></li></ul><p>针对 branches 的覆盖度阈值设定，请访问 <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbuljs</a> 了解更多信息。 此选项不适用于自定义 providers</p><h3 id="coverage-thresholds-statements" tabindex="-1">coverage.thresholds.statements <a class="header-anchor" href="#coverage-thresholds-statements" aria-label="Permalink to “coverage.thresholds.statements”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.thresholds.statements &lt;number&gt;</code></li></ul><p>针对 statements 的覆盖度阈值设定，请访问 <a href="https://github.com/istanbuljs/nyc#coverage-thresholds" target="_blank" rel="noreferrer">istanbuljs</a> 了解更多信息。 此选项不适用于自定义 providers</p><h3 id="coverage-ignoreclassmethods" tabindex="-1">coverage.ignoreClassMethods <a class="header-anchor" href="#coverage-ignoreclassmethods" aria-label="Permalink to “coverage.ignoreClassMethods”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.ignoreClassMethods &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-ignoreclassmethods">coverage.ignoreClassMethods</a></li></ul><p>覆盖时要忽略的类方法名称数组。更多信息请访问 <a href="https://github.com/istanbuljs/nyc#ignoring-methods" target="_blank" rel="noreferrer">istanbuljs</a> 。该选项仅适用于 istanbul providers（默认值：<code>[]</code>）。</p><h3 id="coverage-processingconcurrency" tabindex="-1">coverage.processingConcurrency <a class="header-anchor" href="#coverage-processingconcurrency" aria-label="Permalink to “coverage.processingConcurrency”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.processingConcurrency &lt;number&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-processingconcurrency">coverage.processingConcurrency</a></li></ul><p>处理覆盖率结果时使用的并发限制。 （默认最小值介于 20 和 CPU 数量之间）</p><h3 id="coverage-customprovidermodule" tabindex="-1">coverage.customProviderModule <a class="header-anchor" href="#coverage-customprovidermodule" aria-label="Permalink to “coverage.customProviderModule”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.customProviderModule &lt;path&gt;</code></li><li><strong>Config:</strong> <a href="/config/#coverage-customprovidermodule">coverage.customProviderModule</a></li></ul><p>指定自定义覆盖范围提供程序模块的模块名称或路径。 请访问<a href="https://vitest.dev/guide/coverage#custom-coverage-provider" target="_blank" rel="noreferrer">自定义 providers 覆盖范围</a> 了解更多信息。 此选项仅适用于自定义 providers</p><h3 id="coverage-watermarks-statements" tabindex="-1">coverage.watermarks.statements <a class="header-anchor" href="#coverage-watermarks-statements" aria-label="Permalink to “coverage.watermarks.statements”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.watermarks.statements &lt;watermarks&gt;</code></li></ul><p>High and low watermarks for statements in the format of <code>&lt;high&gt;,&lt;low&gt;</code></p><h3 id="coverage-watermarks-lines" tabindex="-1">coverage.watermarks.lines <a class="header-anchor" href="#coverage-watermarks-lines" aria-label="Permalink to “coverage.watermarks.lines”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.watermarks.lines &lt;watermarks&gt;</code></li></ul><p>High and low watermarks for lines in the format of <code>&lt;high&gt;,&lt;low&gt;</code></p><h3 id="coverage-watermarks-branches" tabindex="-1">coverage.watermarks.branches <a class="header-anchor" href="#coverage-watermarks-branches" aria-label="Permalink to “coverage.watermarks.branches”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.watermarks.branches &lt;watermarks&gt;</code></li></ul><p>High and low watermarks for branches in the format of <code>&lt;high&gt;,&lt;low&gt;</code></p><h3 id="coverage-watermarks-functions" tabindex="-1">coverage.watermarks.functions <a class="header-anchor" href="#coverage-watermarks-functions" aria-label="Permalink to “coverage.watermarks.functions”">​</a></h3><ul><li><strong>CLI:</strong> <code>--coverage.watermarks.functions &lt;watermarks&gt;</code></li></ul><p>High and low watermarks for functions in the format of <code>&lt;high&gt;,&lt;low&gt;</code></p><h3 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to “mode”">​</a></h3><ul><li><strong>CLI:</strong> <code>--mode &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#mode">mode</a></li></ul><p>覆盖 Vite 模式 (默认值: <code>test</code> 或 <code>benchmark</code>)</p><h3 id="isolate" tabindex="-1">isolate <a class="header-anchor" href="#isolate" aria-label="Permalink to “isolate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--isolate</code></li><li><strong>Config:</strong> <a href="/config/#isolate">isolate</a></li></ul><p>隔离运行每个测试文件。要禁用隔离, 使用 <code>--no-isolate</code> (默认值: <code>true</code>)</p><h3 id="globals" tabindex="-1">globals <a class="header-anchor" href="#globals" aria-label="Permalink to “globals”">​</a></h3><ul><li><strong>CLI:</strong> <code>--globals</code></li><li><strong>Config:</strong> <a href="/config/#globals">globals</a></li></ul><p>全局注入</p><h3 id="dom" tabindex="-1">dom <a class="header-anchor" href="#dom" aria-label="Permalink to “dom”">​</a></h3><ul><li><strong>CLI:</strong> <code>--dom</code></li></ul><p>使用 happy-dom 模拟浏览器 API</p><h3 id="browser-enabled" tabindex="-1">browser.enabled <a class="header-anchor" href="#browser-enabled" aria-label="Permalink to “browser.enabled”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.enabled</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-enabled">browser.enabled</a></li></ul><p>在浏览器中运行测试。 相当于 <code>--browser.enabled</code> (默认值: <code>false</code>)</p><h3 id="browser-name" tabindex="-1">browser.name <a class="header-anchor" href="#browser-name" aria-label="Permalink to “browser.name”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.name &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-name">browser.name</a></li></ul><p>在特定浏览器中运行所有测试。某些浏览器仅适用于特定提供商（请参阅 <code>--browser.provider</code> ）。访问 <a href="https://vitest.dev/guide/browser/config/#browser-name" target="_blank" rel="noreferrer"><code>browser.name</code></a> 了解更多信息</p><h3 id="browser-headless" tabindex="-1">browser.headless <a class="header-anchor" href="#browser-headless" aria-label="Permalink to “browser.headless”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.headless</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-headless">browser.headless</a></li></ul><p>在无头模式下运行浏览器（即不打开图形用户界面）。如果在 CI 中运行 Vitest，默认情况下将启用无头模式 (默认值: <code>process.env.CI</code>)</p><h3 id="browser-api-port" tabindex="-1">browser.api.port <a class="header-anchor" href="#browser-api-port" aria-label="Permalink to “browser.api.port”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.api.port [port]</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-api-port">browser.api.port</a></li></ul><p>指定服务器端口。注意，如果端口已被使用，Vite 会自动尝试下一个可用端口，因此这可能不是服务器最终监听的实际端口。如果为 <code>true</code>，将设置为 <code>63315</code></p><h3 id="browser-api-host" tabindex="-1">browser.api.host <a class="header-anchor" href="#browser-api-host" aria-label="Permalink to “browser.api.host”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.api.host [host]</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-api-host">browser.api.host</a></li></ul><p>指定服务器应该监听哪些 IP 地址。设为 <code>0.0.0.0</code> 或 <code>true</code> 则监听所有地址，包括局域网地址和公共地址</p><h3 id="browser-api-strictport" tabindex="-1">browser.api.strictPort <a class="header-anchor" href="#browser-api-strictport" aria-label="Permalink to “browser.api.strictPort”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.api.strictPort</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-api-strictport">browser.api.strictPort</a></li></ul><p>设置为 true 时，如果端口已被使用，则退出，而不是自动尝试下一个可用端口</p><h3 id="browser-provider" tabindex="-1">browser.provider <a class="header-anchor" href="#browser-provider" aria-label="Permalink to “browser.provider”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.provider &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-provider">browser.provider</a></li></ul><p>指定执行浏览器测试时所使用的提供程序。部分浏览器仅在特定的提供程序下可用。可选值有 &quot;webdriverio&quot;、&quot;playwright&quot;、&quot;preview&quot;，也可以填写自定义提供程序的路径。更多信息请查看 <a href="https://vitest.dev/guide/browser/config.html#browser-provider" target="_blank" rel="noreferrer"><code>browser.provider</code></a>（默认值为 &quot;preview&quot;）。</p><h3 id="browser-provideroptions" tabindex="-1">browser.providerOptions <a class="header-anchor" href="#browser-provideroptions" aria-label="Permalink to “browser.providerOptions”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.providerOptions &lt;options&gt;</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-provideroptions">browser.providerOptions</a></li></ul><p>传递给浏览器提供程序的选项。更多信息请访问 <a href="https://vitest.dev/config/#browser-provideroptions" target="_blank" rel="noreferrer"><code>browser.providerOptions</code></a>。</p><h3 id="browser-isolate" tabindex="-1">browser.isolate <a class="header-anchor" href="#browser-isolate" aria-label="Permalink to “browser.isolate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.isolate</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-isolate">browser.isolate</a></li></ul><p>隔离运行每个浏览器测试文件。要禁用隔离请使用 <code>--browser.isolate=false</code> (默认值: <code>true</code>)</p><h3 id="browser-ui" tabindex="-1">browser.ui <a class="header-anchor" href="#browser-ui" aria-label="Permalink to “browser.ui”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.ui</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-ui">browser.ui</a></li></ul><p>运行测试时显示 Vitest UI(默认值: <code>!process.env.CI</code>)</p><h3 id="browser-fileparallelism" tabindex="-1">browser.fileParallelism <a class="header-anchor" href="#browser-fileparallelism" aria-label="Permalink to “browser.fileParallelism”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.fileParallelism</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-fileparallelism">browser.fileParallelism</a></li></ul><p>浏览器测试文件是否应并行运行。使用 <code>--browser.fileParallelism=false</code> 可禁用 (默认值: <code>true</code>)</p><h3 id="browser-connecttimeout" tabindex="-1">browser.connectTimeout <a class="header-anchor" href="#browser-connecttimeout" aria-label="Permalink to “browser.connectTimeout”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.connectTimeout &lt;timeout&gt;</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-connecttimeout">browser.connectTimeout</a></li></ul><p>If connection to the browser takes longer, the test suite will fail (default: <code>60_000</code>)</p><h3 id="browser-trackunhandlederrors" tabindex="-1">browser.trackUnhandledErrors <a class="header-anchor" href="#browser-trackunhandlederrors" aria-label="Permalink to “browser.trackUnhandledErrors”">​</a></h3><ul><li><strong>CLI:</strong> <code>--browser.trackUnhandledErrors</code></li><li><strong>Config:</strong> <a href="/guide/browser/config.html#browser-trackunhandlederrors">browser.trackUnhandledErrors</a></li></ul><p>控制 Vitest 是否捕获未捕获的异常以便报告（默认：<code>true</code>）。</p><h3 id="pool" tabindex="-1">pool <a class="header-anchor" href="#pool" aria-label="Permalink to “pool”">​</a></h3><ul><li><strong>CLI:</strong> <code>--pool &lt;pool&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pool">pool</a></li></ul><p>如果未在浏览器中运行，则指定 pool (默认值: <code>threads</code>)</p><h3 id="pooloptions-threads-isolate" tabindex="-1">poolOptions.threads.isolate <a class="header-anchor" href="#pooloptions-threads-isolate" aria-label="Permalink to “poolOptions.threads.isolate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.threads.isolate</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-threads-isolate">poolOptions.threads.isolate</a></li></ul><p>在线程池中隔离测试 (默认值: <code>true</code>)</p><h3 id="pooloptions-threads-singlethread" tabindex="-1">poolOptions.threads.singleThread <a class="header-anchor" href="#pooloptions-threads-singlethread" aria-label="Permalink to “poolOptions.threads.singleThread”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.threads.singleThread</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-threads-singlethread">poolOptions.threads.singleThread</a></li></ul><p>在单线程内运行测试 (默认值: <code>false</code>)</p><h3 id="pooloptions-threads-maxthreads" tabindex="-1">poolOptions.threads.maxThreads <a class="header-anchor" href="#pooloptions-threads-maxthreads" aria-label="Permalink to “poolOptions.threads.maxThreads”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.threads.maxThreads &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-threads-maxthreads">poolOptions.threads.maxThreads</a></li></ul><p>运行测试的最大线程数或百分比</p><h3 id="pooloptions-threads-minthreads" tabindex="-1">poolOptions.threads.minThreads <a class="header-anchor" href="#pooloptions-threads-minthreads" aria-label="Permalink to “poolOptions.threads.minThreads”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.threads.minThreads &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-threads-minthreads">poolOptions.threads.minThreads</a></li></ul><p>运行测试的最小线程数或百分比</p><h3 id="pooloptions-threads-useatomics" tabindex="-1">poolOptions.threads.useAtomics <a class="header-anchor" href="#pooloptions-threads-useatomics" aria-label="Permalink to “poolOptions.threads.useAtomics”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.threads.useAtomics</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-threads-useatomics">poolOptions.threads.useAtomics</a></li></ul><p>使用 Atomics 同步线程。这在某些情况下可以提高性能，但在较旧的 Node 版本中可能会导致 segfault。 (默认值: <code>false</code>)</p><h3 id="pooloptions-vmthreads-isolate" tabindex="-1">poolOptions.vmThreads.isolate <a class="header-anchor" href="#pooloptions-vmthreads-isolate" aria-label="Permalink to “poolOptions.vmThreads.isolate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmThreads.isolate</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmthreads-isolate">poolOptions.vmThreads.isolate</a></li></ul><p>在线程池中隔离测试 (默认值: <code>true</code>)</p><h3 id="pooloptions-vmthreads-singlethread" tabindex="-1">poolOptions.vmThreads.singleThread <a class="header-anchor" href="#pooloptions-vmthreads-singlethread" aria-label="Permalink to “poolOptions.vmThreads.singleThread”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmThreads.singleThread</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmthreads-singlethread">poolOptions.vmThreads.singleThread</a></li></ul><p>在单线程内运行测试（默认值：<code>false</code>）</p><h3 id="pooloptions-vmthreads-maxthreads" tabindex="-1">poolOptions.vmThreads.maxThreads <a class="header-anchor" href="#pooloptions-vmthreads-maxthreads" aria-label="Permalink to “poolOptions.vmThreads.maxThreads”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmThreads.maxThreads &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmthreads-maxthreads">poolOptions.vmThreads.maxThreads</a></li></ul><p>运行测试的最大线程数或百分比</p><h3 id="pooloptions-vmthreads-minthreads" tabindex="-1">poolOptions.vmThreads.minThreads <a class="header-anchor" href="#pooloptions-vmthreads-minthreads" aria-label="Permalink to “poolOptions.vmThreads.minThreads”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmThreads.minThreads &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmthreads-minthreads">poolOptions.vmThreads.minThreads</a></li></ul><p>运行测试的最小线程数或百分比</p><h3 id="pooloptions-vmthreads-useatomics" tabindex="-1">poolOptions.vmThreads.useAtomics <a class="header-anchor" href="#pooloptions-vmthreads-useatomics" aria-label="Permalink to “poolOptions.vmThreads.useAtomics”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmThreads.useAtomics</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmthreads-useatomics">poolOptions.vmThreads.useAtomics</a></li></ul><p>使用 Atomics 同步线程。这在某些情况下可以提高性能，但在较旧的 Node 版本中可能会导致 segfault。 (默认值: <code>false</code>)</p><h3 id="pooloptions-vmthreads-memorylimit" tabindex="-1">poolOptions.vmThreads.memoryLimit <a class="header-anchor" href="#pooloptions-vmthreads-memorylimit" aria-label="Permalink to “poolOptions.vmThreads.memoryLimit”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmThreads.memoryLimit &lt;limit&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmthreads-memorylimit">poolOptions.vmThreads.memoryLimit</a></li></ul><p>虚拟机线程池的内存限制。如果发现内存泄漏，请尝试调整该值。</p><h3 id="pooloptions-forks-isolate" tabindex="-1">poolOptions.forks.isolate <a class="header-anchor" href="#pooloptions-forks-isolate" aria-label="Permalink to “poolOptions.forks.isolate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.forks.isolate</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-forks-isolate">poolOptions.forks.isolate</a></li></ul><p>在 forks pool 中隔离测试 (默认值: <code>true</code>)</p><h3 id="pooloptions-forks-singlefork" tabindex="-1">poolOptions.forks.singleFork <a class="header-anchor" href="#pooloptions-forks-singlefork" aria-label="Permalink to “poolOptions.forks.singleFork”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.forks.singleFork</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-forks-singlefork">poolOptions.forks.singleFork</a></li></ul><p>单个子进程内运行测试 (default: <code>false</code>)</p><h3 id="pooloptions-forks-maxforks" tabindex="-1">poolOptions.forks.maxForks <a class="header-anchor" href="#pooloptions-forks-maxforks" aria-label="Permalink to “poolOptions.forks.maxForks”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.forks.maxForks &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-forks-maxforks">poolOptions.forks.maxForks</a></li></ul><p>运行测试的最大进程数</p><h3 id="pooloptions-forks-minforks" tabindex="-1">poolOptions.forks.minForks <a class="header-anchor" href="#pooloptions-forks-minforks" aria-label="Permalink to “poolOptions.forks.minForks”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.forks.minForks &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-forks-minforks">poolOptions.forks.minForks</a></li></ul><p>运行测试的最小进程数</p><h3 id="pooloptions-vmforks-isolate" tabindex="-1">poolOptions.vmForks.isolate <a class="header-anchor" href="#pooloptions-vmforks-isolate" aria-label="Permalink to “poolOptions.vmForks.isolate”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmForks.isolate</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmforks-isolate">poolOptions.vmForks.isolate</a></li></ul><p>在 forks pool 中隔离测试 (default: <code>true</code>)</p><h3 id="pooloptions-vmforks-singlefork" tabindex="-1">poolOptions.vmForks.singleFork <a class="header-anchor" href="#pooloptions-vmforks-singlefork" aria-label="Permalink to “poolOptions.vmForks.singleFork”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmForks.singleFork</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmforks-singlefork">poolOptions.vmForks.singleFork</a></li></ul><p>在单个子进程内运行测试 (default: <code>false</code>)</p><h3 id="pooloptions-vmforks-maxforks" tabindex="-1">poolOptions.vmForks.maxForks <a class="header-anchor" href="#pooloptions-vmforks-maxforks" aria-label="Permalink to “poolOptions.vmForks.maxForks”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmForks.maxForks &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmforks-maxforks">poolOptions.vmForks.maxForks</a></li></ul><p>运行测试的最大进程数</p><h3 id="pooloptions-vmforks-minforks" tabindex="-1">poolOptions.vmForks.minForks <a class="header-anchor" href="#pooloptions-vmforks-minforks" aria-label="Permalink to “poolOptions.vmForks.minForks”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmForks.minForks &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmforks-minforks">poolOptions.vmForks.minForks</a></li></ul><p>运行测试的最小进程数</p><h3 id="pooloptions-vmforks-memorylimit" tabindex="-1">poolOptions.vmForks.memoryLimit <a class="header-anchor" href="#pooloptions-vmforks-memorylimit" aria-label="Permalink to “poolOptions.vmForks.memoryLimit”">​</a></h3><ul><li><strong>CLI:</strong> <code>--poolOptions.vmForks.memoryLimit &lt;limit&gt;</code></li><li><strong>Config:</strong> <a href="/config/#pooloptions-vmforks-memorylimit">poolOptions.vmForks.memoryLimit</a></li></ul><p>VM forks pool 的内存限制。如果你观察到内存泄漏问题，可以尝试调整这个值。</p><h3 id="fileparallelism" tabindex="-1">fileParallelism <a class="header-anchor" href="#fileparallelism" aria-label="Permalink to “fileParallelism”">​</a></h3><ul><li><strong>CLI:</strong> <code>--fileParallelism</code></li><li><strong>Config:</strong> <a href="/config/#fileparallelism">fileParallelism</a></li></ul><p>是否所有测试文件都应并行运行. 使用 <code>--no-file-parallelism</code> 去禁用 (默认值: <code>true</code>)</p><h3 id="maxworkers" tabindex="-1">maxWorkers <a class="header-anchor" href="#maxworkers" aria-label="Permalink to “maxWorkers”">​</a></h3><ul><li><strong>CLI:</strong> <code>--maxWorkers &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#maxworkers">maxWorkers</a></li></ul><p>同时并发执行测试任务的最大线程数或百分比</p><h3 id="minworkers" tabindex="-1">minWorkers <a class="header-anchor" href="#minworkers" aria-label="Permalink to “minWorkers”">​</a></h3><ul><li><strong>CLI:</strong> <code>--minWorkers &lt;workers&gt;</code></li><li><strong>Config:</strong> <a href="/config/#minworkers">minWorkers</a></li></ul><p>同时并发执行测试任务的最小线程数或百分比</p><h3 id="environment" tabindex="-1">environment <a class="header-anchor" href="#environment" aria-label="Permalink to “environment”">​</a></h3><ul><li><strong>CLI:</strong> <code>--environment &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#environment">environment</a></li></ul><p>如果不在浏览器中运行，则指定运行环境 (默认值: <code>node</code>)</p><h3 id="passwithnotests" tabindex="-1">passWithNoTests <a class="header-anchor" href="#passwithnotests" aria-label="Permalink to “passWithNoTests”">​</a></h3><ul><li><strong>CLI:</strong> <code>--passWithNoTests</code></li><li><strong>Config:</strong> <a href="/config/#passwithnotests">passWithNoTests</a></li></ul><p>未发现测试时通过</p><h3 id="logheapusage" tabindex="-1">logHeapUsage <a class="header-anchor" href="#logheapusage" aria-label="Permalink to “logHeapUsage”">​</a></h3><ul><li><strong>CLI:</strong> <code>--logHeapUsage</code></li><li><strong>Config:</strong> <a href="/config/#logheapusage">logHeapUsage</a></li></ul><p>在节点中运行时，显示每个测试的堆大小</p><h3 id="allowonly" tabindex="-1">allowOnly <a class="header-anchor" href="#allowonly" aria-label="Permalink to “allowOnly”">​</a></h3><ul><li><strong>CLI:</strong> <code>--allowOnly</code></li><li><strong>Config:</strong> <a href="/config/#allowonly">allowOnly</a></li></ul><p>允许执行那些被标记为&quot;only&quot;的测试用例或测试套件 (默认值: <code>!process.env.CI</code>)</p><h3 id="dangerouslyignoreunhandlederrors" tabindex="-1">dangerouslyIgnoreUnhandledErrors <a class="header-anchor" href="#dangerouslyignoreunhandlederrors" aria-label="Permalink to “dangerouslyIgnoreUnhandledErrors”">​</a></h3><ul><li><strong>CLI:</strong> <code>--dangerouslyIgnoreUnhandledErrors</code></li><li><strong>Config:</strong> <a href="/config/#dangerouslyignoreunhandlederrors">dangerouslyIgnoreUnhandledErrors</a></li></ul><p>忽略任何未处理的错误</p><h3 id="sequence-shuffle-files" tabindex="-1">sequence.shuffle.files <a class="header-anchor" href="#sequence-shuffle-files" aria-label="Permalink to “sequence.shuffle.files”">​</a></h3><ul><li><strong>CLI:</strong> <code>--sequence.shuffle.files</code></li><li><strong>Config:</strong> <a href="/config/#sequence-shuffle-files">sequence.shuffle.files</a></li></ul><p>以随机顺序运行文件。如果启用此选项，长时间运行的测试将不会提前开始。 (默认值: <code>false</code>)</p><h3 id="sequence-shuffle-tests" tabindex="-1">sequence.shuffle.tests <a class="header-anchor" href="#sequence-shuffle-tests" aria-label="Permalink to “sequence.shuffle.tests”">​</a></h3><ul><li><strong>CLI:</strong> <code>--sequence.shuffle.tests</code></li><li><strong>Config:</strong> <a href="/config/#sequence-shuffle-tests">sequence.shuffle.tests</a></li></ul><p>以随机方式运行测试（默认值：<code>false</code>）</p><h3 id="sequence-concurrent" tabindex="-1">sequence.concurrent <a class="header-anchor" href="#sequence-concurrent" aria-label="Permalink to “sequence.concurrent”">​</a></h3><ul><li><strong>CLI:</strong> <code>--sequence.concurrent</code></li><li><strong>Config:</strong> <a href="/config/#sequence-concurrent">sequence.concurrent</a></li></ul><p>使测试并行运行（默认值：<code>false</code>）</p><h3 id="sequence-seed" tabindex="-1">sequence.seed <a class="header-anchor" href="#sequence-seed" aria-label="Permalink to “sequence.seed”">​</a></h3><ul><li><strong>CLI:</strong> <code>--sequence.seed &lt;seed&gt;</code></li><li><strong>Config:</strong> <a href="/config/#sequence-seed">sequence.seed</a></li></ul><p>设置随机化种子。如果 --sequence.shuffle（随机序列）是<code>false</code>，则此选项无效。 t 通过 <a href="https://en.wikipedia.org/wiki/Random_seed" target="_blank" rel="noreferrer">&quot;Random Seed&quot; page</a> 查看更多信息</p><h3 id="sequence-hooks" tabindex="-1">sequence.hooks <a class="header-anchor" href="#sequence-hooks" aria-label="Permalink to “sequence.hooks”">​</a></h3><ul><li><strong>CLI:</strong> <code>--sequence.hooks &lt;order&gt;</code></li><li><strong>Config:</strong> <a href="/config/#sequence-hooks">sequence.hooks</a></li></ul><p>更改钩子的执行顺序。 可接受的值有: &quot;stack&quot;, &quot;list&quot; and &quot;parallel&quot;. 通过 <a href="https://vitest.dev/config/#sequence-hooks" target="_blank" rel="noreferrer"><code>sequence.hooks</code></a> 查看更多信息 (默认值: <code>&quot;parallel&quot;</code>)</p><h3 id="sequence-setupfiles" tabindex="-1">sequence.setupFiles <a class="header-anchor" href="#sequence-setupfiles" aria-label="Permalink to “sequence.setupFiles”">​</a></h3><ul><li><strong>CLI:</strong> <code>--sequence.setupFiles &lt;order&gt;</code></li><li><strong>Config:</strong> <a href="/config/#sequence-setupfiles">sequence.setupFiles</a></li></ul><p>更改设置文件的执行顺序。可接受的值有 &quot;list&quot; 和 &quot;parallel&quot;。如果设置为&quot;list&quot;，将按照定义的顺序运行设置文件。如果设置为 &quot;parallel&quot;，将并行运行设置文件（默认值：<code>&quot;parallel&quot;</code>）。</p><h3 id="inspect" tabindex="-1">inspect <a class="header-anchor" href="#inspect" aria-label="Permalink to “inspect”">​</a></h3><ul><li><strong>CLI:</strong> <code>--inspect [[host:]port]</code></li><li><strong>Config:</strong> <a href="/config/#inspect">inspect</a></li></ul><p>启用 Node.js 检查器（默认值：<code>127.0.0.1:9229</code>）</p><h3 id="inspectbrk" tabindex="-1">inspectBrk <a class="header-anchor" href="#inspectbrk" aria-label="Permalink to “inspectBrk”">​</a></h3><ul><li><strong>CLI:</strong> <code>--inspectBrk [[host:]port]</code></li><li><strong>Config:</strong> <a href="/config/#inspectbrk">inspectBrk</a></li></ul><p>启用 Node.js 检查器并在测试开始前中断</p><h3 id="testtimeout" tabindex="-1">testTimeout <a class="header-anchor" href="#testtimeout" aria-label="Permalink to “testTimeout”">​</a></h3><ul><li><strong>CLI:</strong> <code>--testTimeout &lt;timeout&gt;</code></li><li><strong>Config:</strong> <a href="/config/#testtimeout">testTimeout</a></li></ul><p>测试的默认超时（毫秒）（默认值：<code>5000</code>）。使用 <code>0</code> 完全禁用超时。</p><h3 id="hooktimeout" tabindex="-1">hookTimeout <a class="header-anchor" href="#hooktimeout" aria-label="Permalink to “hookTimeout”">​</a></h3><ul><li><strong>CLI:</strong> <code>--hookTimeout &lt;timeout&gt;</code></li><li><strong>Config:</strong> <a href="/config/#hooktimeout">hookTimeout</a></li></ul><p>默认钩子超时（以毫秒为单位）（默认值：<code>10000</code>）。使用 <code>0</code> 完全禁用超时。</p><h3 id="bail" tabindex="-1">bail <a class="header-anchor" href="#bail" aria-label="Permalink to “bail”">​</a></h3><ul><li><strong>CLI:</strong> <code>--bail &lt;number&gt;</code></li><li><strong>Config:</strong> <a href="/config/#bail">bail</a></li></ul><p>当指定数量的测试失败时停止测试执行（默认值：<code>0</code>）</p><h3 id="retry" tabindex="-1">retry <a class="header-anchor" href="#retry" aria-label="Permalink to “retry”">​</a></h3><ul><li><strong>CLI:</strong> <code>--retry &lt;times&gt;</code></li><li><strong>Config:</strong> <a href="/config/#retry">retry</a></li></ul><p>如果测试失败，重试特定次数（默认值： <code>0</code>）。</p><h3 id="diff-aannotation" tabindex="-1">diff.aAnnotation <a class="header-anchor" href="#diff-aannotation" aria-label="Permalink to “diff.aAnnotation”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.aAnnotation &lt;annotation&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-aannotation">diff.aAnnotation</a></li></ul><p>Annotation for expected lines (default: <code>Expected</code>)</p><h3 id="diff-aindicator" tabindex="-1">diff.aIndicator <a class="header-anchor" href="#diff-aindicator" aria-label="Permalink to “diff.aIndicator”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.aIndicator &lt;indicator&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-aindicator">diff.aIndicator</a></li></ul><p>Indicator for expected lines (default: <code>-</code>)</p><h3 id="diff-bannotation" tabindex="-1">diff.bAnnotation <a class="header-anchor" href="#diff-bannotation" aria-label="Permalink to “diff.bAnnotation”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.bAnnotation &lt;annotation&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-bannotation">diff.bAnnotation</a></li></ul><p>Annotation for received lines (default: <code>Received</code>)</p><h3 id="diff-bindicator" tabindex="-1">diff.bIndicator <a class="header-anchor" href="#diff-bindicator" aria-label="Permalink to “diff.bIndicator”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.bIndicator &lt;indicator&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-bindicator">diff.bIndicator</a></li></ul><p>Indicator for received lines (default: <code>+</code>)</p><h3 id="diff-commonindicator" tabindex="-1">diff.commonIndicator <a class="header-anchor" href="#diff-commonindicator" aria-label="Permalink to “diff.commonIndicator”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.commonIndicator &lt;indicator&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-commonindicator">diff.commonIndicator</a></li></ul><p>Indicator for common lines (default: <code></code>)</p><h3 id="diff-contextlines" tabindex="-1">diff.contextLines <a class="header-anchor" href="#diff-contextlines" aria-label="Permalink to “diff.contextLines”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.contextLines &lt;lines&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-contextlines">diff.contextLines</a></li></ul><p>Number of lines of context to show around each change (default: <code>5</code>)</p><h3 id="diff-emptyfirstorlastlineplaceholder" tabindex="-1">diff.emptyFirstOrLastLinePlaceholder <a class="header-anchor" href="#diff-emptyfirstorlastlineplaceholder" aria-label="Permalink to “diff.emptyFirstOrLastLinePlaceholder”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.emptyFirstOrLastLinePlaceholder &lt;placeholder&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-emptyfirstorlastlineplaceholder">diff.emptyFirstOrLastLinePlaceholder</a></li></ul><p>Placeholder for an empty first or last line (default: <code>&quot;&quot;</code>)</p><h3 id="diff-expand" tabindex="-1">diff.expand <a class="header-anchor" href="#diff-expand" aria-label="Permalink to “diff.expand”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.expand</code></li><li><strong>Config:</strong> <a href="/config/#diff-expand">diff.expand</a></li></ul><p>Expand all common lines (default: <code>true</code>)</p><h3 id="diff-includechangecounts" tabindex="-1">diff.includeChangeCounts <a class="header-anchor" href="#diff-includechangecounts" aria-label="Permalink to “diff.includeChangeCounts”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.includeChangeCounts</code></li><li><strong>Config:</strong> <a href="/config/#diff-includechangecounts">diff.includeChangeCounts</a></li></ul><p>Include comparison counts in diff output (default: <code>false</code>)</p><h3 id="diff-omitannotationlines" tabindex="-1">diff.omitAnnotationLines <a class="header-anchor" href="#diff-omitannotationlines" aria-label="Permalink to “diff.omitAnnotationLines”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.omitAnnotationLines</code></li><li><strong>Config:</strong> <a href="/config/#diff-omitannotationlines">diff.omitAnnotationLines</a></li></ul><p>Omit annotation lines from the output (default: <code>false</code>)</p><h3 id="diff-printbasicprototype" tabindex="-1">diff.printBasicPrototype <a class="header-anchor" href="#diff-printbasicprototype" aria-label="Permalink to “diff.printBasicPrototype”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.printBasicPrototype</code></li><li><strong>Config:</strong> <a href="/config/#diff-printbasicprototype">diff.printBasicPrototype</a></li></ul><p>Print basic prototype Object and Array (default: <code>true</code>)</p><h3 id="diff-maxdepth" tabindex="-1">diff.maxDepth <a class="header-anchor" href="#diff-maxdepth" aria-label="Permalink to “diff.maxDepth”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.maxDepth &lt;maxDepth&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-maxdepth">diff.maxDepth</a></li></ul><p>Limit the depth to recurse when printing nested objects (default: <code>20</code>)</p><h3 id="diff-truncatethreshold" tabindex="-1">diff.truncateThreshold <a class="header-anchor" href="#diff-truncatethreshold" aria-label="Permalink to “diff.truncateThreshold”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.truncateThreshold &lt;threshold&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-truncatethreshold">diff.truncateThreshold</a></li></ul><p>Number of lines to show before and after each change (default: <code>0</code>)</p><h3 id="diff-truncateannotation" tabindex="-1">diff.truncateAnnotation <a class="header-anchor" href="#diff-truncateannotation" aria-label="Permalink to “diff.truncateAnnotation”">​</a></h3><ul><li><strong>CLI:</strong> <code>--diff.truncateAnnotation &lt;annotation&gt;</code></li><li><strong>Config:</strong> <a href="/config/#diff-truncateannotation">diff.truncateAnnotation</a></li></ul><p>Annotation for truncated lines (default: <code>... Diff result is truncated</code>)</p><h3 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to “exclude”">​</a></h3><ul><li><strong>CLI:</strong> <code>--exclude &lt;glob&gt;</code></li><li><strong>Config:</strong> <a href="/config/#exclude">exclude</a></li></ul><p>测试中排除的其他文件路径匹配模式</p><h3 id="expandsnapshotdiff" tabindex="-1">expandSnapshotDiff <a class="header-anchor" href="#expandsnapshotdiff" aria-label="Permalink to “expandSnapshotDiff”">​</a></h3><ul><li><strong>CLI:</strong> <code>--expandSnapshotDiff</code></li><li><strong>Config:</strong> <a href="/config/#expandsnapshotdiff">expandSnapshotDiff</a></li></ul><p>快照失败时显示完整差异</p><h3 id="disableconsoleintercept" tabindex="-1">disableConsoleIntercept <a class="header-anchor" href="#disableconsoleintercept" aria-label="Permalink to “disableConsoleIntercept”">​</a></h3><ul><li><strong>CLI:</strong> <code>--disableConsoleIntercept</code></li><li><strong>Config:</strong> <a href="/config/#disableconsoleintercept">disableConsoleIntercept</a></li></ul><p>禁用自动拦截控制台日志（默认值：<code>false</code>）</p><h3 id="typecheck-enabled" tabindex="-1">typecheck.enabled <a class="header-anchor" href="#typecheck-enabled" aria-label="Permalink to “typecheck.enabled”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.enabled</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-enabled">typecheck.enabled</a></li></ul><p>在测试的同时启用类型检查（默认值：<code>false</code>）</p><h3 id="typecheck-only" tabindex="-1">typecheck.only <a class="header-anchor" href="#typecheck-only" aria-label="Permalink to “typecheck.only”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.only</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-only">typecheck.only</a></li></ul><p>仅运行类型检查测试。这将自动启用类型检查（默认值：<code>false</code>）</p><h3 id="typecheck-checker" tabindex="-1">typecheck.checker <a class="header-anchor" href="#typecheck-checker" aria-label="Permalink to “typecheck.checker”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.checker &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-checker">typecheck.checker</a></li></ul><p>指定要使用的类型检查器。可用值为 &quot;tsc&quot;和 &quot;vue-tsc &quot;以及一个可执行文件的路径（默认值：<code>tsc</code>）</p><h3 id="typecheck-allowjs" tabindex="-1">typecheck.allowJs <a class="header-anchor" href="#typecheck-allowjs" aria-label="Permalink to “typecheck.allowJs”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.allowJs</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-allowjs">typecheck.allowJs</a></li></ul><p>允许对 JavaScript 文件进行类型检查。默认值取自 tsconfig.json</p><h3 id="typecheck-ignoresourceerrors" tabindex="-1">typecheck.ignoreSourceErrors <a class="header-anchor" href="#typecheck-ignoresourceerrors" aria-label="Permalink to “typecheck.ignoreSourceErrors”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.ignoreSourceErrors</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-ignoresourceerrors">typecheck.ignoreSourceErrors</a></li></ul><p>忽略源文件中的类型错误</p><h3 id="typecheck-tsconfig" tabindex="-1">typecheck.tsconfig <a class="header-anchor" href="#typecheck-tsconfig" aria-label="Permalink to “typecheck.tsconfig”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.tsconfig &lt;path&gt;</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-tsconfig">typecheck.tsconfig</a></li></ul><p>自定义 tsconfig 文件的路径</p><h3 id="typecheck-spawntimeout" tabindex="-1">typecheck.spawnTimeout <a class="header-anchor" href="#typecheck-spawntimeout" aria-label="Permalink to “typecheck.spawnTimeout”">​</a></h3><ul><li><strong>CLI:</strong> <code>--typecheck.spawnTimeout &lt;time&gt;</code></li><li><strong>Config:</strong> <a href="/config/#typecheck-spawntimeout">typecheck.spawnTimeout</a></li></ul><p>Minimum time in milliseconds it takes to spawn the typechecker</p><h3 id="project" tabindex="-1">project <a class="header-anchor" href="#project" aria-label="Permalink to “project”">​</a></h3><ul><li><strong>CLI:</strong> <code>--project &lt;name&gt;</code></li><li><strong>Config:</strong> <a href="/config/#project">project</a></li></ul><p>如果我们正在使用 Vitest 的工作区功能，这是要运行的项目名称。这个参数可以重复以指定多个项目：<code>--project=1 --project=2</code>。我们还可以使用通配符来过滤项目，例如 <code>--project=packages*</code>，以及使用 <code>--project=!pattern</code> 来排除项目。</p><h3 id="slowtestthreshold" tabindex="-1">slowTestThreshold <a class="header-anchor" href="#slowtestthreshold" aria-label="Permalink to “slowTestThreshold”">​</a></h3><ul><li><strong>CLI:</strong> <code>--slowTestThreshold &lt;threshold&gt;</code></li><li><strong>Config:</strong> <a href="/config/#slowtestthreshold">slowTestThreshold</a></li></ul><p>测试速度慢的阈值（以毫秒为单位）（默认值：<code>300</code>）</p><h3 id="teardowntimeout" tabindex="-1">teardownTimeout <a class="header-anchor" href="#teardowntimeout" aria-label="Permalink to “teardownTimeout”">​</a></h3><ul><li><strong>CLI:</strong> <code>--teardownTimeout &lt;timeout&gt;</code></li><li><strong>Config:</strong> <a href="/config/#teardowntimeout">teardownTimeout</a></li></ul><p>拆卸函数的默认超时（以毫秒为单位）（默认值：<code>10000</code>）</p><h3 id="maxconcurrency" tabindex="-1">maxConcurrency <a class="header-anchor" href="#maxconcurrency" aria-label="Permalink to “maxConcurrency”">​</a></h3><ul><li><strong>CLI:</strong> <code>--maxConcurrency &lt;number&gt;</code></li><li><strong>Config:</strong> <a href="/config/#maxconcurrency">maxConcurrency</a></li></ul><p>套件中并发测试的最大次数（默认值：<code>5</code>）</p><h3 id="expect-requireassertions" tabindex="-1">expect.requireAssertions <a class="header-anchor" href="#expect-requireassertions" aria-label="Permalink to “expect.requireAssertions”">​</a></h3><ul><li><strong>CLI:</strong> <code>--expect.requireAssertions</code></li><li><strong>Config:</strong> <a href="/config/#expect-requireassertions">expect.requireAssertions</a></li></ul><p>要求所有测试至少有一个断言</p><h3 id="expect-poll-interval" tabindex="-1">expect.poll.interval <a class="header-anchor" href="#expect-poll-interval" aria-label="Permalink to “expect.poll.interval”">​</a></h3><ul><li><strong>CLI:</strong> <code>--expect.poll.interval &lt;interval&gt;</code></li><li><strong>Config:</strong> <a href="/config/#expect-poll-interval">expect.poll.interval</a></li></ul><p>断言的轮询间隔 <code>expect.poll()</code> (默认值: <code>50</code>)</p><h3 id="expect-poll-timeout" tabindex="-1">expect.poll.timeout <a class="header-anchor" href="#expect-poll-timeout" aria-label="Permalink to “expect.poll.timeout”">​</a></h3><ul><li><strong>CLI:</strong> <code>--expect.poll.timeout &lt;timeout&gt;</code></li><li><strong>Config:</strong> <a href="/config/#expect-poll-timeout">expect.poll.timeout</a></li></ul><p>断言的轮询超时（以毫秒为单位） <code>expect.poll()</code> (默认值: <code>1000</code>)</p><h3 id="printconsoletrace" tabindex="-1">printConsoleTrace <a class="header-anchor" href="#printconsoletrace" aria-label="Permalink to “printConsoleTrace”">​</a></h3><ul><li><strong>CLI:</strong> <code>--printConsoleTrace</code></li><li><strong>Config:</strong> <a href="/config/#printconsoletrace">printConsoleTrace</a></li></ul><p>始终打印控制台堆栈跟踪</p><h3 id="includetasklocation" tabindex="-1">includeTaskLocation <a class="header-anchor" href="#includetasklocation" aria-label="Permalink to “includeTaskLocation”">​</a></h3><ul><li><strong>CLI:</strong> <code>--includeTaskLocation</code></li><li><strong>Config:</strong> <a href="/config/#includetasklocation">includeTaskLocation</a></li></ul><p>Collect test and suite locations in the <code>location</code> property</p><h3 id="attachmentsdir" tabindex="-1">attachmentsDir <a class="header-anchor" href="#attachmentsdir" aria-label="Permalink to “attachmentsDir”">​</a></h3><ul><li><strong>CLI:</strong> <code>--attachmentsDir &lt;dir&gt;</code></li><li><strong>Config:</strong> <a href="/config/#attachmentsdir">attachmentsDir</a></li></ul><p>The directory where attachments from <code>context.annotate</code> are stored in (default: <code>.vitest-attachments</code>)</p><h3 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to “run”">​</a></h3><ul><li><strong>CLI:</strong> <code>--run</code></li></ul><p>禁用 watch 模式</p><h3 id="color" tabindex="-1">color <a class="header-anchor" href="#color" aria-label="Permalink to “color”">​</a></h3><ul><li><strong>CLI:</strong> <code>--no-color</code></li></ul><p>删除控制台输出中的颜色</p><h3 id="clearscreen" tabindex="-1">clearScreen <a class="header-anchor" href="#clearscreen" aria-label="Permalink to “clearScreen”">​</a></h3><ul><li><strong>CLI:</strong> <code>--clearScreen</code></li></ul><p>watch 模式下重新运行测试时清除终端屏幕（默认值：<code>true</code>）。</p><h3 id="configloader" tabindex="-1">configLoader <a class="header-anchor" href="#configloader" aria-label="Permalink to “configLoader”">​</a></h3><ul><li><strong>CLI:</strong> <code>--configLoader &lt;loader&gt;</code></li></ul><p>Use <code>bundle</code> to bundle the config with esbuild or <code>runner</code> (experimental) to process it on the fly. This is only available in vite version 6.1.0 and above. (default: <code>bundle</code>)</p><h3 id="standalone" tabindex="-1">standalone <a class="header-anchor" href="#standalone" aria-label="Permalink to “standalone”">​</a></h3><ul><li><strong>CLI:</strong> <code>--standalone</code></li></ul><p>启动 Vitest 但不运行测试。只有在文件发生变化时才会运行测试。当通过 CLI 传递了文件过滤器时，此选项将被忽略。（默认值：<code>false</code>）</p><h3 id="changed" tabindex="-1">changed <a class="header-anchor" href="#changed" aria-label="Permalink to “changed”">​</a></h3><ul><li><p><strong>类型</strong>: <code>boolean | string</code></p></li><li><p><strong>默认值</strong>: false</p><p>设置为 true 时，仅对已更改的文件运行测试。默认情况下，将考虑所有未提交的更改（包括已暂存和未暂存的文件）。</p><p>要对最近一次提交中的更改运行测试，可以使用 <code>--changed HEAD~1</code>。还可以使用提交哈希（<code>commit hash</code>）或分支名称。</p><p>如果与 <code>forceRerunTriggers</code> 配置选项配合使用，并找到与更改的文件匹配的内容，将运行整个测试套件。</p><p>与代码覆盖一起使用时，报告将只包含与更改相关的文件。</p><p>如果与 <a href="/config/#forcereruntriggers"><code>forceRerunTriggers</code></a>配置选项搭配使用，则在 <code>forceRerunTriggers</code> 列表中列出的文件至少有一个发生变化时，将运行整个测试套件。默认情况下，Vitest 配置文件和 <code>package.json</code> 的更改将始终重新运行整个套件。</p></li></ul><h3 id="shard" tabindex="-1">shard <a class="header-anchor" href="#shard" aria-label="Permalink to “shard”">​</a></h3><ul><li><p><strong>类型</strong>: <code>string</code></p></li><li><p><strong>默认值</strong>: disabled</p><p>测试套件分片，格式为 <code>&lt;index&gt;/&lt;count&gt;</code>，其中</p><ul><li><code>count</code> 是正整数，表示分割的部分数</li><li><code>index</code> 是正整数，表示当前分片的索引</li></ul><p>该命令将将所有测试分成 <code>count</code> 个相等的部分，并只运行位于 <code>index</code> 部分的测试。例如，要将测试套件分成三个部分，请使用以下命令：</p></li></ul><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shard=1/3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shard=2/3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --shard=3/3</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">警告</p><p>无法在启用 <code>--watch</code>（默认情况下在开发中启用）时使用此选项。</p></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>如果在没有输出文件的情况下使用 <code>--reporter=blob</code>，则默认路径将包括当前碎片配置，以避免与其他 Vitest 进程发生冲突。</p></div><h3 id="merge-reports" tabindex="-1">merge-reports <a class="header-anchor" href="#merge-reports" aria-label="Permalink to “merge-reports”">​</a></h3><ul><li><strong>类型:</strong> <code>boolean | string</code></li></ul><p>合并位于指定文件夹中的每个 blob 报告（默认情况下为<code>.vitest-reports</code>）。你可以将任何报告程序与此命令一起使用（<a href="/guide/reporters.html#blob-reporter"><code>blob</code></a> 除外）：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --merge-reports</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --reporter=junit</span></span></code></pre></div>`,461)]))}const f=o(s,[["render",t]]);export{g as __pageData,f as default};
