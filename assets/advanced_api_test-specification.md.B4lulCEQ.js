import{_ as n,b as l,i as p,o as h,ar as a,j as e,M as i,g as k,w as d}from"./chunks/framework.lk4jPI36.js";const f=JSON.parse('{"title":"TestSpecification","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/api/test-specification.md","filePath":"advanced/api/test-specification.md","lastUpdated":1758986088000}'),r={name:"advanced/api/test-specification.md"},o={id:"pool",tabindex:"-1"};function c(g,s,E,y,b,F){const t=l("Badge");return h(),p("div",null,[s[4]||(s[4]=a(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /advanced/api/test-specification.md for this page in Markdown format</div><h1 id="testspecification" tabindex="-1">TestSpecification <a class="header-anchor" href="#testspecification" aria-label="Permalink to “TestSpecification”">​</a></h1><p><code>TestSpecification</code> 类描述了要作为测试运行的模块及其参数。</p><p>你只能通过在测试项目上调用 <a href="/advanced/api/test-project.html#createspecification"><code>createSpecification</code></a> 方法来创建规范：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> specification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./example.test.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// optional test lines</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>createSpecification</code> 期望一个已解析的模块 ID。它不会自动解析文件或检查文件是否存在于文件系统中。</p><h2 id="taskid" tabindex="-1">taskId <a class="header-anchor" href="#taskid" aria-label="Permalink to “taskId”">​</a></h2><p><a href="/advanced/api/test-suite.html#id">Test module&#39;s</a> identifier.</p><h2 id="project" tabindex="-1">project <a class="header-anchor" href="#project" aria-label="Permalink to “project”">​</a></h2><p>这引用了测试模块所属的 <a href="/advanced/api/test-project.html"><code>TestProject</code></a>。</p><h2 id="moduleid" tabindex="-1">moduleId <a class="header-anchor" href="#moduleid" aria-label="Permalink to “moduleId”">​</a></h2><p>Vite 模块图中的模块 ID。通常，它是一个使用 POSIX 分隔符的绝对文件路径：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:/Users/Documents/project/example.test.ts&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ✅</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/mac/project/example.test.ts&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ✅</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Users</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Documents</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example.test.ts&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ❌</span></span></code></pre></div><h2 id="testmodule" tabindex="-1">testModule <a class="header-anchor" href="#testmodule" aria-label="Permalink to “testModule”">​</a></h2><p>Instance of <a href="/advanced/api/test-module.html"><code>TestModule</code></a> associated with the specification. If test wasn&#39;t queued yet, this will be <code>undefined</code>.</p>`,15)),e("h2",o,[s[1]||(s[1]=i("pool ",-1)),k(t,{type:"warning"},{default:d(()=>s[0]||(s[0]=[i("experimental",-1)])),_:1,__:[0]}),s[2]||(s[2]=i()),s[3]||(s[3]=e("a",{class:"header-anchor",href:"#pool","aria-label":"Permalink to “pool experimental”"},"​",-1))]),s[5]||(s[5]=a(`<p>测试模块将运行的 <a href="/config/#pool"><code>pool</code></a>。</p><div class="danger custom-block"><p class="custom-block-title custom-block-title-default">DANGER</p><p>通过 <a href="/config/#poolmatchglob"><code>poolMatchGlob</code></a> 和 <a href="/config/#typecheck-enabled"><code>typecheck.enabled</code></a>，单个测试项目中可以有多个池。这意味着可以有多个规范具有相同的 <code>moduleId</code> 但不同的 <code>pool</code>。在 Vitest 4 中，项目将仅支持单个池，此属性将被移除。</p></div><h2 id="testlines" tabindex="-1">testLines <a class="header-anchor" href="#testlines" aria-label="Permalink to “testLines”">​</a></h2><p>这是源代码中定义测试文件的行号数组。此字段仅在 <code>createSpecification</code> 方法接收数组时定义。</p><p>请注意，如果这些行中的至少一行没有测试，整个测试套件将会失败。以下是一个正确的 <code>testLines</code> 配置示例：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-59" id="tab-60" checked><label data-title="script.js" for="tab-60">script.js</label><input type="radio" name="group-59" id="tab-61"><label data-title="example.test.js" for="tab-61">example.test.js</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> specification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./example.test.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-highlighted" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { test, describe } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;verification works&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line highlighted error"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a group of tests&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nested test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;skipped test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div></div><h2 id="tojson" tabindex="-1">toJSON <a class="header-anchor" href="#tojson" aria-label="Permalink to “toJSON”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toJSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SerializedTestSpecification</span></span></code></pre></div><p><code>toJSON</code> 生成一个 JSON 友好的对象，可以被 <a href="/guide/browser/">浏览器模式</a> 或 <a href="/guide/ui.html">Vitest UI</a> 消费。</p>`,9))])}const m=n(r,[["render",c]]);export{f as __pageData,m as default};
