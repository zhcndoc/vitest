import{_ as a,i as t,o as r,ar as e,j as i,av as n,aw as l,ax as h,ay as p,az as o}from"./chunks/framework.lk4jPI36.js";const u=JSON.parse('{"title":"Vitest 3.0 发布了!","description":"","frontmatter":{"title":"Vitest 3.0 发布了!","author":{"name":"The Vitest Team"},"date":"2025-01-17T00:00:00.000Z","sidebar":false,"head":[["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:title","content":"Vitest 3.0 发布了!"}],["meta",{"property":"og:image","content":"https://vitest.dev/og-vitest-3.jpg"}],["meta",{"property":"og:url","content":"https://vitest.dev/blog/vitest-3"}],["meta",{"property":"og:description","content":"Vitest 3.0 Release Announcement"}],["meta",{"name":"twitter:card","content":"summary_large_image"}]]},"headers":[],"relativePath":"blog/vitest-3.md","filePath":"blog/vitest-3.md","lastUpdated":1758986088000}'),k={name:"blog/vitest-3.md"};function d(g,s,c,E,b,f){return r(),t("div",null,s[0]||(s[0]=[e('<h1 id="vitest-3-0-发布了" tabindex="-1">Vitest 3.0 发布了! <a class="header-anchor" href="#vitest-3-0-发布了" aria-label="Permalink to “Vitest 3.0 发布了!”">​</a></h1><p><em>January 17, 2025</em></p><p><img src="'+h+'" alt="Vitest 3 Announcement Cover Image"></p><p>我们在半年前发布了 Vitest 2。我们见证了它被广泛采用，每周 npm 下载量从 480 万次增长到 770 万次。我们的生态系统也在快速发展。其中包括，Storybook 新的测试功能由我们的 VS Code 扩展和浏览器模式提供支持，以及 Matt Pocock 正在基于 Vitest 开发 Evalite，这是一个用于评估 AI 驱动应用的工具。</p><h2 id="下一个-vitest-主要版本来了" tabindex="-1">下一个 Vitest 主要版本来了 <a class="header-anchor" href="#下一个-vitest-主要版本来了" aria-label="Permalink to “下一个 Vitest 主要版本来了”">​</a></h2><p>今天，我们激动地宣布 Vitest 3 的发布！这是一个重要的版本！</p><p>快速链接:</p><ul><li><a href="/">Docs</a></li><li>Translations: <a href="https://cn.vitest.dev/" target="_blank" rel="noreferrer">简体中文</a></li><li><a href="/guide/migration.html">Migration Guide</a></li><li><a href="https://github.com/vitest-dev/vitest/releases/tag/v3.0.0" target="_blank" rel="noreferrer">GitHub Changelog</a></li></ul><p>如果你之前没有使用过 Vitest，我们建议你先阅读<a href="/guide/">入门指南</a>和<a href="/guide/features.html">特性指南</a>。</p><p>我们衷心感谢超过 <a href="https://github.com/vitest-dev/vitest/graphs/contributors" target="_blank" rel="noreferrer">550 位 Vitest Core 的贡献者</a>，以及 Vitest 集成、工具和翻译的维护者和贡献者，他们帮助我们开发了这个新的主要版本。我们鼓励你参与进来，帮助我们为整个生态系统改进 Vitest。请在我们的<a href="https://github.com/vitest-dev/vitest/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">贡献指南</a>中了解更多信息。</p><p>如果你要开始参与，我们建议你帮助<a href="https://github.com/vitest-dev/vitest/issues" target="_blank" rel="noreferrer">分类问题</a>、<a href="https://github.com/vitest-dev/vitest/pulls" target="_blank" rel="noreferrer">审查 PR</a>、基于开放的问题发送包含失败测试的 PR，并在 <a href="https://github.com/vitest-dev/vitest/discussions" target="_blank" rel="noreferrer">Discussions</a> 和 Vitest Land 的帮助论坛中<a href="https://discord.com/channels/917386801235247114/1057959614160851024" target="_blank" rel="noreferrer">帮助其他人</a>。如果你想与我们交流，请加入我们的 <a href="http://chat.vitest.dev/" target="_blank" rel="noreferrer">Discord 社区</a>，并在 <a href="https://discord.com/channels/917386801235247114/1057959614160851024" target="_blank" rel="noreferrer">#contributing 频道</a>上打个招呼。</p><p>要获取关于 Vitest 生态系统和 Vitest Core 的最新消息，请在 <a href="https://bsky.app/profile/vitest.dev" target="_blank" rel="noreferrer">Bluesky</a> 或 <a href="https://webtoo.ls/@vitest" target="_blank" rel="noreferrer">Mastodon</a> 上关注我们。</p><h2 id="报告器-reporter-更新" tabindex="-1">报告器（Reporter）更新 <a class="header-anchor" href="#报告器-reporter-更新" aria-label="Permalink to “报告器（Reporter）更新”">​</a></h2><p><a href="https://github.com/ariperkkio" target="_blank" rel="noreferrer">@AriPerkkio</a> 重写了 Vitest 报告测试运行的方式。你应该会看到更少的闪烁和更稳定的输出！</p><div class="flex align-center justify-center"><video controls><source src="'+p+'" type="video/webm"></video></div><p>伴随此更改，我们还重新设计了公共报告器 API（reporters 字段），使<a href="/advanced/api/reporters.html">生命周期</a>更容易理解。</p><p>你可以在 <a href="https://github.com/vitest-dev/vitest/pull/7069" target="_blank" rel="noreferrer">#7069</a> PR 中关注设计过程。为了逆向工程之前的 onTaskUpdate API 并实现这个新的优雅生命周期，我们经历了一番艰难的努力。</p><div class="flex align-center justify-center"><img src="'+o+`"></div><h2 id="内联工作区-inline-workspace" tabindex="-1">内联工作区（Inline Workspace） <a class="header-anchor" href="#内联工作区-inline-workspace" aria-label="Permalink to “内联工作区（Inline Workspace）”">​</a></h2><p>值得高兴的是！你无需再为每个项目单独创建文件来定义 <a href="/guide/projects.html">workspace</a> 了 —— 只要在 <code>vitest.config</code> 配置文件中通过 <code>workspace</code> 字段列出你的项目数组即可：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    workspace: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="多浏览器配置" tabindex="-1">多浏览器配置 <a class="header-anchor" href="#多浏览器配置" aria-label="Permalink to “多浏览器配置”">​</a></h2><p>Vitest 3 引入了一种更高效的方式来在不同的浏览器或设置中运行浏览器测试。你可以定义一个<a href="/guide/browser/multiple-setups.html">实例数组</a>来在不同的设置中运行浏览器测试，而不是使用工作区：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;playwright&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          browser: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chromium&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          launch: { devtools: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          browser: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;firefox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          setupFiles: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./setup.firefox.ts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          provide: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            secret: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-secret&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>实例相对于工作区的主要优势在于更好的缓存策略 - Vitest 只创建一个 Vite 服务器来服务文件，这些文件只会被处理一次，而与你测试的浏览器数量无关。</p><p>此版本还改进了浏览器模式特性的文档，并引入了针对 <a href="/guide/browser/playwright.html">Playwright</a> 和 <a href="/guide/browser/webdriverio.html">WebdriverIO</a> 的单独指南，希望能使配置更容易。</p><h2 id="按位置过滤-filtering-by-location" tabindex="-1">按位置过滤（Filtering by Location） <a class="header-anchor" href="#按位置过滤-filtering-by-location" aria-label="Permalink to “按位置过滤（Filtering by Location）”">​</a></h2><p>在 Vitest 3 中，你现在可以按行号过滤测试。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>$ vitest basic/foo.js:10</span></span>
<span class="line"><span>$ vitest ./basic/foo.js:10</span></span></code></pre></div><p>特别感谢 <a href="https://github.com/mzhubail" target="_blank" rel="noreferrer">@mzhubail</a> 实现了这个功能。</p><h2 id="公共-public-api" tabindex="-1">公共（Public） API <a class="header-anchor" href="#公共-public-api" aria-label="Permalink to “公共（Public） API”">​</a></h2><p>我们重新设计了从 <code>vitest/node</code> 可用的公共 API，并计划在下一个小版本中移除实验性标签。此版本还包含了涵盖所有公开方法的全新文档。</p>`,32),i("img",{alt:"Vitest API documentation","img-light":"",src:n},null,-1),i("img",{alt:"Vitest API documentation","img-dark":"",src:l},null,-1),e('<h2 id="破坏性变更-breaking-changes" tabindex="-1">破坏性变更（Breaking changes） <a class="header-anchor" href="#破坏性变更-breaking-changes" aria-label="Permalink to “破坏性变更（Breaking changes）”">​</a></h2><p>Vitest 3 有一些小的破坏性变更，这些变更应该不会影响大多数用户，但我们建议在升级之前查看详细的<a href="/guide/migration.html#vitest-3">迁移指南</a>。</p><p>完整的变更列表请见 <a href="https://github.com/vitest-dev/vitest/releases/tag/v3.0.0" target="_blank" rel="noreferrer">Vitest 3 更新日志</a>。</p><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-label="Permalink to “致谢”">​</a></h2><p>Vitest 3 是 <a href="/team.html">Vitest 团队</a>和我们的贡献者无数小时努力的成果。我们感谢赞助 Vitest <a href="https://github.com/sheremet-va" target="_blank" rel="noreferrer">Vladimir</a> 和 <a href="https://github.com/hi-ogawa" target="_blank" rel="noreferrer">Hiroshi</a> 加入了 <a href="https://voidzero.dev" target="_blank" rel="noreferrer">VoidZero</a> 全职从事 Vite 和 Vitest <a href="https://stackblitz.com/" target="_blank" rel="noreferrer">StackBlitz</a> 聘请了 <a href="https://github.com/ariperkkio" target="_blank" rel="noreferrer">Ari</a> 来投入更多时间进行 Vitest 开发。特别感谢 <a href="https://nuxtlabs.com" target="_blank" rel="noreferrer">NuxtLabs</a>、<a href="https://zammad.com" target="_blank" rel="noreferrer">Zammad</a> 以及 <a href="https://github.com/sponsors/vitest-dev" target="_blank" rel="noreferrer">Vitest 在 GitHub Sponsors</a> 和 <a href="https://opencollective.com/vitest" target="_blank" rel="noreferrer">Vitest&#39;s Open Collective</a> 上的赞助者。</p>',5)]))}const v=a(k,[["render",d]]);export{u as __pageData,v as default};
