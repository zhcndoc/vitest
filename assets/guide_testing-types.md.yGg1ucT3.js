import{_ as i,i as a,o as e,ar as t}from"./chunks/framework.lk4jPI36.js";const o=JSON.parse('{"title":"类型测试 | 指南","description":"","frontmatter":{"title":"类型测试 | 指南"},"headers":[],"relativePath":"guide/testing-types.md","filePath":"guide/testing-types.md","lastUpdated":1758986088000}'),n={name:"guide/testing-types.md"};function p(l,s,h,k,d,r){return e(),a("div",null,s[0]||(s[0]=[t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/testing-types.md for this page in Markdown format</div><h1 id="类型测试" tabindex="-1">类型测试 <a class="header-anchor" href="#类型测试" aria-label="Permalink to “类型测试”">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Sample Project</p><p><a href="https://github.com/vitest-dev/vitest/tree/main/examples/typecheck" target="_blank" rel="noreferrer">GitHub</a> - <a href="https://stackblitz.com/fork/github/vitest-dev/vitest/tree/main/examples/typecheck?initialPath=__vitest__/" target="_blank" rel="noreferrer">Play Online</a></p></div><p>Vitest 允许你使用 <code>expectTypeOf</code> 或 <code>assertType</code> 语法为你的类型编写测试。默认情况下，<code>*.test-d.ts</code> 文件中的所有测试都被视为类型测试，但你可以使用 <a href="/config/#typecheck-include"><code>typecheck.include</code></a> 配置选项更改它。</p><p>在这里，Vitest 调用 <code>tsc</code> 或 <code>vue-tsc</code>，具体取决于你的配置，并解析结果。如果发现任何类型错误，Vitest 还会在你的源代码中打印出类型错误。你可以使用 <a href="/config/#typecheck-ignoresourceerrors"><code>typecheck.ignoreSourceErrors</code></a> 配置选项禁用它。</p><p>请记住，Vitest 不会运行这些文件，编译器只会对它们进行静态分析。也就是说，如果您使用动态名称或 <code>test.each</code> 或 <code>test.for</code>，测试名称将不会被评估 - 它将原样显示。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>在 Vitest 2.1 之前，您的 <code>typecheck.include</code> 覆盖了 <code>include</code> 模式，因此您的运行时测试并没有实际运行；它们只是被类型检查。</p><p>自 Vitest 2.1 起，如果您的 <code>include</code> 和 <code>typecheck.include</code> 重叠，Vitest 将分别报告类型测试和运行时测试。</p></div><p>使用 CLI 标志，如 <code>--allowOnly</code> 和 <code>-t</code> 也支持类型检查。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="mount.test-d.ts">mount.test-d.ts</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { assertType, expectTypeOf } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mount } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./mount.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my types work properly&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mount).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mount).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMatchTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // @ts-expect-error name is a string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  assertType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div><p>在测试文件中触发的任何类型错误都将被视为测试错误，因此你可以使用任何类型技巧来测试项目中的类型。</p><p>你可以在 <a href="/api/#expecttypeof">API 部分</a> 中查看可能的匹配器列表。</p><h2 id="读取错误" tabindex="-1">读取错误 <a class="header-anchor" href="#读取错误" aria-label="Permalink to “读取错误”">​</a></h2><p>如果使用的是 <code>expectTypeOf</code> API，请参阅 <a href="https://github.com/mmkal/expect-type#error-messages" target="_blank" rel="noreferrer">expect-type 关于其错误信息的文档</a>。</p><p>当类型不匹配时，<code>.toEqualTypeOf</code> 和 <code>.toMatchTypeOf</code>会使用一种特殊的辅助类型来生成尽可能可操作的错误信息。但要理解它们还有一些细微差别。由于断言是 &quot;流畅地 &quot;编写的，所以失败应该发生在 &quot;预期 &quot;类型上，而不是 &quot;实际 &quot;类型上（<code>expect&lt;Actual&gt;().toEqualTypeOf&lt;Expected&gt;()</code>）。这意味着类型错误可能有点令人困惑，因此该库生成了一个 <code>MismatchInfo</code> 类型，试图明确说明期望是什么。例如</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqualTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;()</span></span></code></pre></div><p>是一个将失败的断言，因为 <code>{a: 1}</code> 的类型是 <code>{a: number}</code> 而不是 <code>{a: string}</code>。 这种情况下的错误信息如下</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>test/test.ts:999:999 - error TS2344: Type &#39;{ a: string; }&#39; does not satisfy the constraint &#39;{ a: \\\\&quot;Expected: string, Actual: number\\\\&quot;; }&#39;.</span></span>
<span class="line"><span>  Types of property &#39;a&#39; are incompatible.</span></span>
<span class="line"><span>    Type &#39;string&#39; is not assignable to type &#39;\\\\&quot;Expected: string, Actual: number\\\\&quot;&#39;.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>999 expectTypeOf({a: 1}).toEqualTypeOf&lt;{a: string}&gt;()</span></span></code></pre></div><p>请注意，报告的类型约束是一个可读性强的消息，指定了&quot;期望&quot;和&quot;实际&quot;类型。不要字面上解读句子 <code>Types of property &#39;a&#39; are incompatible // Type &#39;string&#39; is not assignable to type &quot;Expected: string, Actual: number&quot;</code> ，而是看属性名（<code>&#39;a&#39;</code>）和消息内容：<code>Expected: string, Actual: number</code>。这将告诉你出了什么问题，在大多数情况下。当然，对于非常复杂的类型，调试可能需要更多的努力，并且可能需要一些试验。如果错误消息实际上是误导性的，请<a href="https://github.com/mmkal/expect-type" target="_blank" rel="noreferrer">提出问题</a>。</p><p>对于像 <code>expectTypeOf(1).toBeString()</code> 这样的断言，<code>toBe...</code> 方法（如 <code>toBeString</code>、<code>toBeNumber</code>、<code>toBeVoid</code> 等）在被测试的 <code>Actual</code> 类型不匹配时会解析为一个不可调用的类型。例如，失败的断言可能会显示如下内容：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>test/test.ts:999:999 - error TS2349: This expression is not callable.</span></span>
<span class="line"><span>  Type &#39;ExpectString&lt;number&gt;&#39; has no call signatures.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>999 expectTypeOf(1).toBeString()</span></span>
<span class="line"><span>                    ~~~~~~~~~~</span></span></code></pre></div><p>这部分的<code>This expression is not callable</code>并没有太大的帮助 - 有意义的错误在下一行，<code>Type &#39;ExpectString&lt;number&gt; has no call signatures</code>。这基本上意味着你传递了一个数字，但断言它应该是一个字符串。</p><p>如果 TypeScript 添加了对 <a href="https://github.com/microsoft/TypeScript/pull/40468" target="_blank" rel="noreferrer">&quot;throw&quot; 类型</a> 的支持，这些错误消息将会显著改进。在那之前，它们需要一定程度的仔细观察。</p><h4 id="具体的-expected-对象与类型参数" tabindex="-1">具体的 &quot;expected &quot; 对象与类型参数 <a class="header-anchor" href="#具体的-expected-对象与类型参数" aria-label="Permalink to “具体的 &quot;expected &quot; 对象与类型参数”">​</a></h4><p>像这样的断言的错误消息：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqualTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>对于像这样的断言，错误消息将不够有帮助：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqualTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;{ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }&gt;()</span></span></code></pre></div><p>这是因为 TypeScript 编译器需要推断 <code>.toEqualTypeOf({a: &#39;&#39;})</code> 样式的类型参数，并且该库只能通过将其与通用的 <code>Mismatch</code> 类型进行比较来标记它为失败。因此，在可能的情况下，使用类型参数而不是具体类型来使用 <code>.toEqualTypeOf</code> 和 <code>toMatchTypeOf</code>。如果使用两个具体类型进行比较更加方便，可以使用 <code>typeof</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> one</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> valueFromFunctionOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ some: { complex: inputs } })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> two</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> valueFromFunctionTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ some: { other: inputs } })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(one).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqualTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> two&gt;()</span></span></code></pre></div><p>如果你发现很难使用 <code>expectTypeOf</code> API 并找出错误，你始终可以使用更简单的 <code>assertType</code> API：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> answer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(answer)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ts-expect-error answer is not a string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(answer)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>使用 <code>@ts-expect-error</code> 语法时，你可能想确保没有输入错误。你可以通过在 <a href="/config/#include"><code>test.include</code></a> 配置选项中包含你的类型文件来做到这一点，因此 Vitest 实际上也会<em>运行</em>这些测试并因 <code>ReferenceError</code> 而失败。</p><p>这将通过，因为它预计会出现错误，但 “answer” 这个词有错别字，所以这是一个误报错误：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ts-expect-error answer is not a string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(answr)</span></span></code></pre></div></div><h2 id="运行类型检查" tabindex="-1">运行类型检查 <a class="header-anchor" href="#运行类型检查" aria-label="Permalink to “运行类型检查”">​</a></h2><p>要启用类型检查，只需在 <code>package.json</code> 文件中的 Vitest 命令中添加 <a href="/config/#typecheck"><code>--typecheck</code></a> 标志：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="package.json">package.json</span></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vitest --typecheck&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>现在你可以运行 typecheck:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-101" id="tab-102" checked><label data-title="npm" for="tab-102">npm</label><input type="radio" name="group-101" id="tab-103"><label data-title="yarn" for="tab-103">yarn</label><input type="radio" name="group-101" id="tab-104"><label data-title="pnpm" for="tab-104">pnpm</label><input type="radio" name="group-101" id="tab-105"><label data-title="bun" for="tab-105">bun</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div></div></div><p>Vitest 使用 <code>tsc --noEmit</code> 或 <code>vue-tsc --noEmit</code>，具体取决于你的配置，因此可以从管道中删除这些脚本。</p>`,38)]))}const g=i(n,[["render",p]]);export{o as __pageData,g as default};
