import{_ as i,i as e,o as a,ar as t}from"./chunks/framework.lk4jPI36.js";const c=JSON.parse('{"title":"并行性 | Guide","description":"","frontmatter":{"title":"并行性 | Guide","outline":"deep"},"headers":[],"relativePath":"guide/parallelism.md","filePath":"guide/parallelism.md","lastUpdated":1758986088000}'),n={name:"guide/parallelism.md"};function l(r,s,h,p,d,k){return a(),e("div",null,s[0]||(s[0]=[t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/parallelism.md for this page in Markdown format</div><h1 id="并行性" tabindex="-1">并行性 <a class="header-anchor" href="#并行性" aria-label="Permalink to “并行性”">​</a></h1><h2 id="文件级并行" tabindex="-1">文件级并行 <a class="header-anchor" href="#文件级并行" aria-label="Permalink to “文件级并行”">​</a></h2><p>Vitest 默认会并行执行 <em>测试文件</em> 。具体使用哪种并行机制取决于配置的 <code>pool</code> 类型：</p><ul><li><code>forks</code>（默认）和 <code>vmForks</code> 会在不同的 <a href="https://nodejs.org/api/child_process.html" target="_blank" rel="noreferrer">child processes</a> 中执行测试</li><li><code>threads</code> 和 <code>vmThreads</code> 则会在不同的 <a href="https://nodejs.org/api/worker_threads.html" target="_blank" rel="noreferrer">worker threads</a> 中运行</li></ul><p>在文档中，“子进程”和“工作线程”统称为“工作者”。你可以通过 <a href="/config/#minworkers"><code>minWorkers</code></a> 和 <a href="/config/#maxworkers"><code>maxWorkers</code></a> 参数来控制并行工作的数量，也可以通过 <a href="/config/#pooloptions"><code>poolOptions</code></a> 进行更详细的配置。</p><p>如果项目包含大量测试文件，通常并行执行会大幅提升速度。但具体效果还要看项目本身、运行环境以及是否启用了 <a href="/config/#isolate">隔离</a>。若需要关闭文件级并行化，可以将 <a href="/config/#fileparallelism"><code>fileParallelism</code></a> 设为 <code>false</code> 。更多性能优化技巧，请参考 <a href="/guide/improving-performance.html">性能指南</a> 。</p><h2 id="测试用例并行" tabindex="-1">测试用例并行 <a class="header-anchor" href="#测试用例并行" aria-label="Permalink to “测试用例并行”">​</a></h2><p>与 <em>测试文件</em> 不同， Vitest 在同一个文件中会顺序执行 <em>测试用例</em> 。也就是说，同一个文件里的测试会按定义顺序一个接一个地执行。</p><p>如果希望让同一文件中的多个测试并行执行，可以使用 <a href="/api/#test-concurrent"><code>concurrent</code></a> 选项。启用后， Vitest 会将同一文件中的并发测试分组，并基于 maxConcurrency 控制并行度，然后通过 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noreferrer"><code>Promise.all</code></a> 一起执行。</p><p>Vitest 不会自动分析你的测试是否可以并行，也不会为了并发而额外创建工作者。这意味着，只有在测试中有大量异步操作时，使用并发才能提升性能。例如，以下示例即便指定了 concurrent ，也会顺序执行，因为它们是同步的：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;the first test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;the second test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>如果希望所有测试用例都并发执行，可以将 <a href="/config/#sequence-concurrent"><code>sequence.concurrent</code></a> 配置项设为 <code>true</code> 。</p>`,13)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
