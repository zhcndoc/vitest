import{_ as k}from"./chunks/theme.DgHYi77D.js";import{_ as p,b as d,i as r,o,j as a,ar as l,M as s,g as e,w as t}from"./chunks/framework.lk4jPI36.js";const S=JSON.parse('{"title":"Vitest API","description":"","frontmatter":{"outline":"deep","title":"Vitest API"},"headers":[],"relativePath":"advanced/api/vitest.md","filePath":"advanced/api/vitest.md","lastUpdated":1758986088000}'),c={name:"advanced/api/vitest.md"},g={id:"benchmark-实验性",tabindex:"-1"},E={id:"state-实验性",tabindex:"-1"},y={id:"watcher",tabindex:"-1"},F={id:"matchesprojectfilter",tabindex:"-1"},u={id:"waitfortestrunend",tabindex:"-1"},b={id:"createcoverageprovider",tabindex:"-1"},f={id:"parsespecification",tabindex:"-1"},C={id:"parsespecifications",tabindex:"-1"};function m(v,i,A,B,D,P){const h=d("Badge"),n=k;return o(),r("div",null,[i[40]||(i[40]=a("div",{style:{display:"none"},hidden:"true","aria-hidden":"true"},"Are you an LLM? You can read better optimized documentation at /advanced/api/vitest.md for this page in Markdown format",-1)),i[41]||(i[41]=a("h1",{id:"vitest",tabindex:"-1"},[s("Vitest "),a("a",{class:"header-anchor",href:"#vitest","aria-label":"Permalink to “Vitest”"},"​")],-1)),i[42]||(i[42]=a("p",null,"Vitest 实例需要当前的测试模式。它可以是以下之一：",-1)),a("ul",null,[i[3]||(i[3]=a("li",null,[a("code",null,"test"),s("：运行运行时测试时")],-1)),a("li",null,[i[1]||(i[1]=a("code",null,"benchmark",-1)),i[2]||(i[2]=s("：运行基准测试时 ",-1)),e(h,{type:"warning"},{default:t(()=>i[0]||(i[0]=[s("实验性",-1)])),_:1,__:[0]})])]),i[43]||(i[43]=l('<details class="details custom-block"><summary>Vitest 3 中的新特性</summary><p>Vitest 3 在稳定公共 API 方面迈出了一步。为了实现这一点，我们弃用并删除了 <code>Vitest</code> 类上的一些先前公开的方法。这些 API 已被私有化：</p><ul><li><code>configOverride</code>（使用 <a href="#setglobaltestnamepattern"><code>setGlobalTestNamePattern</code></a> 或 <a href="#enablesnapshotupdate"><code>enableSnapshotUpdate</code></a>）</li><li><code>coverageProvider</code></li><li><code>filenamePattern</code></li><li><code>runningPromise</code></li><li><code>closingPromise</code></li><li><code>isCancelling</code></li><li><code>coreWorkspaceProject</code></li><li><code>resolvedProjects</code></li><li><code>_browserLastPort</code></li><li><code>_options</code></li><li><code>reporters</code></li><li><code>vitenode</code></li><li><code>runner</code></li><li><code>pool</code></li><li><code>setServer</code></li><li><code>_initBrowserServers</code></li><li><code>rerunTask</code></li><li><code>changeProjectName</code></li><li><code>changeNamePattern</code></li><li><code>changeFilenamePattern</code></li><li><code>rerunFailed</code></li><li><code>_createRootProject</code>（重命名为 <code>_ensureRootProject</code>，但仍为私有）</li><li><code>filterTestsBySource</code>（此方法已移至新的内部 <code>vitest.specifications</code> 实例）</li><li><code>runFiles</code>（使用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a> 代替）</li><li><code>onAfterSetServer</code></li></ul><p>这些 API 已被弃用：</p><ul><li><code>invalidates</code></li><li><code>changedTests</code>（使用 <a href="#onfilterwatchedspecification"><code>onFilterWatchedSpecification</code></a> 代替）</li><li><code>server</code>（使用 <a href="#vite"><code>vite</code></a> 代替）</li><li><code>getProjectsByTestFile</code>（使用 <a href="#getmodulespecifications"><code>getModuleSpecifications</code></a> 代替）</li><li><code>getFileWorkspaceSpecs</code>（使用 <a href="#getmodulespecifications"><code>getModuleSpecifications</code></a> 代替）</li><li><code>getModuleProjects</code>（自行通过 <a href="#projects"><code>this.projects</code></a> 过滤）</li><li><code>updateLastChanged</code>（重命名为 <a href="#invalidatefile"><code>invalidateFile</code></a>）</li><li><code>globTestSpecs</code>（使用 <a href="#globtestspecifications"><code>globTestSpecifications</code></a> 代替）</li><li><code>globTestFiles</code>（使用 <a href="#globtestspecifications"><code>globTestSpecifications</code></a> 代替）</li><li><code>listFile</code>（使用 <a href="#getrelevanttestspecifications"><code>getRelevantTestSpecifications</code></a> 代替）</li></ul></details><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to “mode”">​</a></h2><h3 id="test" tabindex="-1">test <a class="header-anchor" href="#test" aria-label="Permalink to “test”">​</a></h3><p>测试模式只会调用 <code>test</code> 或 <code>it</code> 中的函数，并在遇到 <code>bench</code> 时抛出错误。此模式使用配置中的 <code>include</code> 和 <code>exclude</code> 选项来查找测试文件。</p>',4)),a("h3",g,[i[5]||(i[5]=s("benchmark ",-1)),e(h,{type:"warning"},{default:t(()=>i[4]||(i[4]=[s("实验性",-1)])),_:1,__:[4]}),i[6]||(i[6]=s()),i[7]||(i[7]=a("a",{class:"header-anchor",href:"#benchmark-实验性","aria-label":"Permalink to “benchmark 实验性”"},"​",-1))]),i[44]||(i[44]=l('<p>基准测试模式调用 <code>bench</code> 函数，并在遇到 <code>test</code> 或 <code>it</code> 时抛出错误。此模式使用配置中的 <code>benchmark.include</code> 和 <code>benchmark.exclude</code> 选项来查找基准测试文件。</p><h2 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to “config”">​</a></h2><p>这是根配置（也叫全局配置）。如果你在配置中定义了多个项目，这些项目都会将这个配置视作它们的 <code>globalConfig</code> 并进行继承或引用。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>这是 Vitest 配置，它不扩展 <em>Vite</em> 配置。它仅包含从 <code>test</code> 属性解析的值。</p></div><h2 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to “vite”">​</a></h2><p>这是全局的 <a href="https://vite.dev/guide/api-javascript#vitedevserver" target="_blank" rel="noreferrer"><code>ViteDevServer</code></a>。</p>',6)),a("h2",E,[i[9]||(i[9]=s("state ",-1)),e(h,{type:"warning"},{default:t(()=>i[8]||(i[8]=[s("实验性",-1)])),_:1,__:[8]}),i[10]||(i[10]=s()),i[11]||(i[11]=a("a",{class:"header-anchor",href:"#state-实验性","aria-label":"Permalink to “state 实验性”"},"​",-1))]),i[45]||(i[45]=l(`<div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>公共 <code>state</code> 是一个实验性 API（除了 <code>vitest.state.getReportedEntity</code>）。破坏性更改可能不遵循 SemVer，请在使用时固定 Vitest 的版本。</p></div><p>全局状态存储有关当前测试的信息。默认情况下，它使用与 <code>@vitest/runner</code> 相同的 API，但我们建议通过调用 <code>@vitest/runner</code> API 上的 <code>state.getReportedEntity()</code> 来使用 <a href="/advanced/reporters.html#reported-tasks">报告任务 API</a>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitest.state.idMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(taskId) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 旧 API</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> testCase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitest.state.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getReportedEntity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(task) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新 API</span></span></code></pre></div><p>未来，旧 API 将不再公开。</p><h2 id="snapshot" tabindex="-1">snapshot <a class="header-anchor" href="#snapshot" aria-label="Permalink to “snapshot”">​</a></h2><p>全局快照管理器。Vitest 使用 <code>snapshot.add</code> 方法跟踪所有快照。</p><p>我们可以通过 <code>vitest.snapshot.summary</code> 属性获取快照的最新摘要。</p><h2 id="cache" tabindex="-1">cache <a class="header-anchor" href="#cache" aria-label="Permalink to “cache”">​</a></h2><p>缓存管理器，存储有关最新测试结果和测试文件状态的信息。在 Vitest 中，这仅由默认的排序器用于排序测试。</p>`,9)),a("h2",y,[i[13]||(i[13]=s("watcher ",-1)),e(n,null,{default:t(()=>i[12]||(i[12]=[s("4.0.0",-1)])),_:1,__:[12]}),i[14]||(i[14]=s()),i[15]||(i[15]=a("a",{class:"header-anchor",href:"#watcher","aria-label":"Permalink to “watcher 4.0.0”"},"​",-1))]),i[46]||(i[46]=l(`<p>这是 Vitest 的 watcher 实例，提供追踪文件变更并重新执行测试的便利方法。若关闭内置 watcher ，你仍可在自定义 watcher 中调用 <code>onFileChange</code>、<code>onFileDelete</code> 或 <code>onFileCreate</code> 完成相同任务。</p><h2 id="projects" tabindex="-1">projects <a class="header-anchor" href="#projects" aria-label="Permalink to “projects”">​</a></h2><p>这是一个数组，里面包含了所有 <a href="/advanced/api/test-project.html">测试项目</a> ，这些项目是用户自己定义的。如果用户没有显式指定任何项目，那么这个数组中只会包含一个 <a href="#getrootproject">根项目</a> 。</p><p>Vitest 会保证这个数组里至少有一个项目可用。如果用户在命令行里通过 --project 参数指定了不存在的项目名称，Vitest 会在创建这个数组前就报错。</p><h2 id="getrootproject" tabindex="-1">getRootProject <a class="header-anchor" href="#getrootproject" aria-label="Permalink to “getRootProject”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRootProject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestProject</span></span></code></pre></div><p>该方法会返回根测试项目。一般情况下，根项目并不会实际执行测试，也不会被加入到 <code>vitest.projects</code> 列表中，除非用户在配置中主动包含了根配置，或者没有定义任何独立的测试项目。</p><p>根项目的主要目标是设置全局配置。实际上，<code>rootProject.config</code> 直接引用 <code>rootProject.globalConfig</code> 和 <code>vitest.config</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rootProject.config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootProject.globalConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootProject.vitest.config</span></span></code></pre></div><h2 id="provide" tabindex="-1">provide <a class="header-anchor" href="#provide" aria-label="Permalink to “provide”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProvidedContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProvidedContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>Vitest 公开了 <code>provide</code> 方法，它是 <code>vitest.getRootProject().provide</code> 的简写。通过此方法，我们可以从主线程传递值到测试中。所有值在存储之前都通过 <code>structuredClone</code> 进行检查，但值本身不会被克隆。</p><p>为了接收测试中的值，我们需要从 <code>vitest</code> 入口点导入 <code>inject</code> 方法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { inject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wsPort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3000</span></span></code></pre></div><p>为了更好的类型安全性，我们鼓励我们扩展 <code>ProvidedContext</code> 的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createVitest } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vitest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createVitest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vitest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wsPort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProvidedContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    wsPort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>从技术上讲，<code>provide</code> 是 <a href="/advanced/api/test-project.html"><code>TestProject</code></a> 的一种方法，因此它仅限于特定项目。但是，所有项目都会从根项目继承值，这使得 <code>vitest.provide</code> 成为将值传递给测试的通用方法。</p></div><h2 id="getprovidedcontext" tabindex="-1">getProvidedContext <a class="header-anchor" href="#getprovidedcontext" aria-label="Permalink to “getProvidedContext”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getProvidedContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProvidedContext</span></span></code></pre></div><p>返回根上下文对象。这是 <code>vitest.getRootProject().getProvidedContext</code> 的简写。</p><h2 id="getprojectbyname" tabindex="-1">getProjectByName <a class="header-anchor" href="#getprojectbyname" aria-label="Permalink to “getProjectByName”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getProjectByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestProject</span></span></code></pre></div><p>此方法通过名称返回项目。类似于调用 <code>vitest.projects.find</code> 。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>如果项目不存在，此方法将返回根项目 - 请确保再次检查返回的项目是否是我们要找的项目。</p><p>如果用户没有自定义名称，Vitest 将分配一个空字符串作为名称。</p></div><h2 id="globtestspecifications" tabindex="-1">globTestSpecifications <a class="header-anchor" href="#globtestspecifications" aria-label="Permalink to “globTestSpecifications”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> globTestSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  filters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]&gt;</span></span></code></pre></div><p>此方法通过收集所有项目中的每个测试来构造新的 <a href="/advanced/api/test-specification.html">测试规范</a>，使用 <a href="/advanced/api/test-project.html#globtestfiles"><code>project.globTestFiles</code></a>。它接受字符串过滤器以匹配测试文件 - 这些过滤器与 <a href="/guide/filtering.html#cli">CLI 支持的过滤器</a> 相同。</p><p>此方法自动缓存所有测试规范。当我们下次调用 <a href="#getmodulespecifications"><code>getModuleSpecifications</code></a> 时，它将返回相同的规范，除非在此之前调用了 <a href="#clearspecificationscache"><code>clearSpecificationsCache</code></a>。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>从 Vitest 3 开始，如果 <code>poolMatchGlob</code> 有多个池或启用了 <code>typecheck</code>，则可能有多个具有相同模块 ID（文件路径）的测试规范。这种可能性将在 Vitest 4 中移除。</p></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> specifications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globTestSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-filter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [TestSpecification{ moduleId: &#39;/tests/my-filter.test.ts&#39; }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(specifications)</span></span></code></pre></div><h2 id="getrelevanttestspecifications" tabindex="-1">getRelevantTestSpecifications <a class="header-anchor" href="#getrelevanttestspecifications" aria-label="Permalink to “getRelevantTestSpecifications”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRelevantTestSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  filters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]&gt;</span></span></code></pre></div><p>此方法通过调用 <a href="/advanced/api/test-project.html#globtestfiles"><code>project.globTestFiles</code></a> 解析每个测试规范。它接受字符串过滤器以匹配测试文件 - 这些过滤器与 <a href="/guide/filtering.html#cli">CLI 支持的过滤器</a> 相同。如果指定了 <code>--changed</code> 标志，则列表将被过滤为仅包含已更改的文件。<code>getRelevantTestSpecifications</code> 不会运行任何测试文件。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>此方法可能很慢，因为它需要过滤 <code>--changed</code> 标志。如果我们只需要测试文件列表，请不要使用它。</p><ul><li>如果我们需要获取已知测试文件的规范列表，请使用 <a href="#getmodulespecifications"><code>getModuleSpecifications</code></a> 代替。</li><li>如果我们需要获取所有可能的测试文件列表，请使用 <a href="#globtestspecifications"><code>globTestSpecifications</code></a>。</li></ul></div><h2 id="mergereports" tabindex="-1">mergeReports <a class="header-anchor" href="#mergereports" aria-label="Permalink to “mergeReports”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mergeReports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">directory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>合并指定目录中的多个运行的报告（如果未指定，则使用 <code>--merge-reports</code> 的值）。此值也可以在 <code>config.mergeReports</code> 上设置（默认情况下，它将读取 <code>.vitest-reports</code> 文件夹）。</p><p>请注意，<code>directory</code> 将始终相对于工作目录解析。</p><p>如果设置了 <code>config.mergeReports</code>，则此方法由 <a href="/advanced/guide/tests.html"><code>startVitest</code></a> 自动调用。</p><h2 id="collect" tabindex="-1">collect <a class="header-anchor" href="#collect" aria-label="Permalink to “collect”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>执行测试文件而不运行测试回调。<code>collect</code> 返回未处理的错误和 <a href="/advanced/api/test-module.html">测试模块</a> 数组。它接受字符串过滤器以匹配测试文件 - 这些过滤器与 <a href="/guide/filtering.html#cli">CLI 支持的过滤器</a> 相同。</p><p>此方法根据配置的 <code>include</code>、<code>exclude</code> 和 <code>includeSource</code> 值解析测试规范。有关更多信息，请参阅 <a href="/advanced/api/test-project.html#globtestfiles"><code>project.globTestFiles</code></a>。如果指定了 <code>--changed</code> 标志，则列表将被过滤为仅包含已更改的文件。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>请注意，Vitest 不使用静态分析来收集测试。Vitest 将像运行常规测试一样在隔离环境中运行每个测试文件。</p><p>这使得此方法非常慢，除非我们在收集测试之前禁用隔离。</p></div><h2 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-label="Permalink to “start”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>初始化报告器、覆盖率提供者并运行测试。此方法接受字符串过滤器以匹配测试文件 - 这些过滤器与 <a href="/guide/filtering.html#cli">CLI 支持的过滤器</a> 相同。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>如果还调用了 <a href="#init"><code>vitest.init()</code></a>，则不应调用此方法。如果我们需要在 Vitest 初始化后运行测试，请使用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a> 或 <a href="#reruntestspecifications"><code>rerunTestSpecifications</code></a>。</p></div><p>如果未设置 <code>config.mergeReports</code> 和 <code>config.standalone</code>，则此方法由 <a href="/advanced/guide/tests.html"><code>startVitest</code></a> 自动调用。</p><h2 id="init" tabindex="-1">init <a class="header-anchor" href="#init" aria-label="Permalink to “init”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>初始化报告器和覆盖率提供者。此方法不运行任何测试。如果提供了 <code>--watch</code> 标志，Vitest 仍将运行更改的测试，即使未调用此方法。</p><p>在内部，仅当启用了 <a href="/guide/cli.html#standalone"><code>--standalone</code></a> 标志时才会调用此方法。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>如果还调用了 <a href="#start"><code>vitest.start()</code></a>，则不应调用此方法。</p></div><p>如果设置了 <code>config.standalone</code>，则此方法由 <a href="/advanced/guide/tests.html"><code>startVitest</code></a> 自动调用。</p><h2 id="getmodulespecifications" tabindex="-1">getModuleSpecifications <a class="header-anchor" href="#getmodulespecifications" aria-label="Permalink to “getModuleSpecifications”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getModuleSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moduleId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span></code></pre></div><p>返回与模块 ID 相关的测试规范列表。ID 应已解析为绝对文件路径。如果 ID 不匹配 <code>include</code> 或 <code>includeSource</code> 模式，则返回的数组将为空。</p><p>此方法可以根据 <code>moduleId</code> 和 <code>pool</code> 返回已缓存的规范。但请注意，<a href="/advanced/api/test-project.html#createspecification"><code>project.createSpecification</code></a> 总是返回一个新实例，并且不会自动缓存。但是，当调用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a> 时，规范会自动缓存。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>从 Vitest 3 开始，此方法使用缓存来检查文件是否为测试文件。为确保缓存不为空，请至少调用一次 <a href="#globtestspecifications"><code>globTestSpecifications</code></a>。</p></div><h2 id="clearspecificationscache" tabindex="-1">clearSpecificationsCache <a class="header-anchor" href="#clearspecificationscache" aria-label="Permalink to “clearSpecificationsCache”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clearSpecificationsCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moduleId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>当调用 <a href="#globtestspecifications"><code>globTestSpecifications</code></a> 或 <a href="#runtestspecifications"><code>runTestSpecifications</code></a> 时，Vitest 会自动缓存每个文件的测试规范。此方法会根据第一个参数清除给定文件的缓存或整个缓存。</p><h2 id="runtestspecifications" tabindex="-1">runTestSpecifications <a class="header-anchor" href="#runtestspecifications" aria-label="Permalink to “runTestSpecifications”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTestSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  specifications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  allTestsRun</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>该方法会遍历并执行所有根据 <a href="/advanced/api/test-specification.html">测试规格</a> 定义的测试用例。第二个参数 <code>allTestsRun</code> 则供覆盖率工具判断是否应在覆盖率报告中加入那些没有被任何测试覆盖到的文件。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>此方法不会触发 <code>onWatcherRerun</code>、<code>onWatcherStart</code> 和 <code>onTestsRerun</code> 回调。如果我们基于文件更改重新运行测试，请考虑使用 <a href="#reruntestspecifications"><code>rerunTestSpecifications</code></a> 代替。</p></div><h2 id="reruntestspecifications" tabindex="-1">rerunTestSpecifications <a class="header-anchor" href="#reruntestspecifications" aria-label="Permalink to “rerunTestSpecifications”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rerunTestSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  specifications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  allTestsRun</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>此方法发出 <code>reporter.onWatcherRerun</code> 和 <code>onTestsRerun</code> 事件，然后使用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a> 运行测试。如果主进程中没有错误，它将发出 <code>reporter.onWatcherStart</code> 事件。</p><h2 id="updatesnapshot" tabindex="-1">updateSnapshot <a class="header-anchor" href="#updatesnapshot" aria-label="Permalink to “updateSnapshot”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">files</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>更新指定文件中的快照。如果未提供文件，它将更新具有失败测试和过时快照的文件。</p><h2 id="collecttests" tabindex="-1">collectTests <a class="header-anchor" href="#collecttests" aria-label="Permalink to “collectTests”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> collectTests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  specifications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestRunResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>执行测试文件而不运行测试回调。<code>collectTests</code> 返回未处理的错误和 <a href="/advanced/api/test-module.html">测试模块</a> 数组。</p><p>此方法与 <a href="#collect"><code>collect</code></a> 完全相同，但我们需要自己提供测试规范。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>请注意，Vitest 不使用静态分析来收集测试。Vitest 将像运行常规测试一样在隔离环境中运行每个测试文件。</p><p>这使得此方法非常慢，除非我们在收集测试之前禁用隔离。</p></div><h2 id="cancelcurrentrun" tabindex="-1">cancelCurrentRun <a class="header-anchor" href="#cancelcurrentrun" aria-label="Permalink to “cancelCurrentRun”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cancelCurrentRun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CancelReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>此方法将优雅地取消所有正在进行的测试。它将等待已启动的测试完成运行，并且不会运行已计划运行但尚未启动的测试。</p><h2 id="setglobaltestnamepattern" tabindex="-1">setGlobalTestNamePattern <a class="header-anchor" href="#setglobaltestnamepattern" aria-label="Permalink to “setGlobalTestNamePattern”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setGlobalTestNamePattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>此方法覆盖全局的 <a href="/config/#testnamepattern">测试名称模式</a>。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>此方法不会开始运行任何测试。要使用更新后的模式运行测试，请调用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a>。</p></div><h2 id="resetglobaltestnamepattern" tabindex="-1">resetGlobalTestNamePattern <a class="header-anchor" href="#resetglobaltestnamepattern" aria-label="Permalink to “resetGlobalTestNamePattern”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resetGlobalTestNamePattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>此方法重置 <a href="/config/#testnamepattern">测试名称模式</a>。这意味着 Vitest 现在不会跳过任何测试。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>此方法不会开始运行任何测试。要运行没有模式的测试，请调用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a>。</p></div><h2 id="enablesnapshotupdate" tabindex="-1">enableSnapshotUpdate <a class="header-anchor" href="#enablesnapshotupdate" aria-label="Permalink to “enableSnapshotUpdate”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enableSnapshotUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>启用允许在运行测试时更新快照的模式。在此方法调用后运行的每个测试都将更新快照。要禁用此模式，请调用 <a href="#resetsnapshotupdate"><code>resetSnapshotUpdate</code></a>。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>此方法不会开始运行任何测试。要更新快照，请使用 <a href="#runtestspecifications"><code>runTestSpecifications</code></a> 运行测试。</p></div><h2 id="resetsnapshotupdate" tabindex="-1">resetSnapshotUpdate <a class="header-anchor" href="#resetsnapshotupdate" aria-label="Permalink to “resetSnapshotUpdate”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resetSnapshotUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>禁用允许在运行测试时更新快照的模式。此方法不会开始运行任何测试。</p><h2 id="invalidatefile" tabindex="-1">invalidateFile <a class="header-anchor" href="#invalidatefile" aria-label="Permalink to “invalidateFile”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invalidateFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filepath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>此方法使每个项目缓存中的文件失效。如果我们依赖自己的观察器，则此方法非常有用，因为 Vite 的缓存会持久保存在内存中。</p><div class="danger custom-block"><p class="custom-block-title custom-block-title-default">DANGER</p><p>如果我们禁用 Vitest 的观察器但保持 Vitest 运行，则必须使用此方法手动清除缓存，因为无法禁用缓存。此方法还将使文件的导入者失效。</p></div><h2 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to “import”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moduleId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>使用 Vite 模块运行器导入文件。文件将通过全局配置由 Vite 转换，并在单独的上下文中执行。请注意，<code>moduleId</code> 将相对于 <code>config.root</code>。</p><div class="danger custom-block"><p class="custom-block-title custom-block-title-default">DANGER</p><p><code>project.import</code> 重用 Vite 的模块图，因此使用常规导入导入同一模块将返回不同的模块：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> staticExample </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./example.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dynamicExample</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vitest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./example.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dynamicExample </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> staticExample </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>Vitest 在内部会通过这个方法加载全局设置、自定义的覆盖率工具和报告器。只要这些组件都挂载在同一个 Vite 服务器下，它们就会共享相同的模块依赖图。</p></div><h2 id="close" tabindex="-1">close <a class="header-anchor" href="#close" aria-label="Permalink to “close”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>关闭所有项目及其相关资源。此方法只能调用一次；关闭的 Promise 会被缓存，直到服务器重新启动。</p><h2 id="exit" tabindex="-1">exit <a class="header-anchor" href="#exit" aria-label="Permalink to “exit”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">force</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>关闭所有项目并退出进程。如果 <code>force</code> 设置为 <code>true</code>，则进程将在关闭项目后立即退出。</p><p>如果进程在 <a href="/config/#teardowntimeout"><code>config.teardownTimeout</code></a> 毫秒后仍然处于活动状态，此方法还将强制调用 <code>process.exit()</code>。</p><h2 id="shouldkeepserver" tabindex="-1">shouldKeepServer <a class="header-anchor" href="#shouldkeepserver" aria-label="Permalink to “shouldKeepServer”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldKeepServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span></code></pre></div><p>如果测试完成后服务器应继续运行，则此方法将返回 <code>true</code>。这通常意味着启用了 <code>watch</code> 模式。</p><h2 id="onserverrestart" tabindex="-1">onServerRestart <a class="header-anchor" href="#onserverrestart" aria-label="Permalink to “onServerRestart”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onServerRestart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnServerRestartHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>注册一个处理程序，当服务器由于配置更改而重新启动时调用。</p><h2 id="oncancel" tabindex="-1">onCancel <a class="header-anchor" href="#oncancel" aria-label="Permalink to “onCancel”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reason</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CancelReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awaitable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>注册一个处理程序，当测试运行被 <a href="#cancelcurrentrun"><code>vitest.cancelCurrentRun</code></a> 取消时调用。</p><h2 id="onclose" tabindex="-1">onClose <a class="header-anchor" href="#onclose" aria-label="Permalink to “onClose”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Awaitable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>注册一个处理程序，当服务器关闭时调用。</p><h2 id="ontestsrerun" tabindex="-1">onTestsRerun <a class="header-anchor" href="#ontestsrerun" aria-label="Permalink to “onTestsRerun”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onTestsRerun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTestsRerunHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>注册一个处理程序，当测试重新运行时调用。当手动调用 <a href="#reruntestspecifications"><code>rerunTestSpecifications</code></a> 或文件更改且内置观察器安排重新运行时，测试会重新运行。</p><h2 id="onfilterwatchedspecification" tabindex="-1">onFilterWatchedSpecification <a class="header-anchor" href="#onfilterwatchedspecification" aria-label="Permalink to “onFilterWatchedSpecification”">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onFilterWatchedSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">specification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span></code></pre></div><p>注册一个处理程序，当文件更改时调用。此回调应返回 <code>true</code> 或 <code>false</code>，指示是否需要重新运行测试文件。</p><p>通过此方法，我们可以挂钩到默认的观察器逻辑，以延迟或丢弃用户当前不想跟踪的测试：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> continuesTests</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myCustomWrapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onContinuesRunEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">testItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  continuesTests.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item.fsPath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vitest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onFilterWatchedSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">specification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  continuesTests.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(specification.moduleId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Vitest 可以根据 <code>pool</code> 或 <code>locations</code> 选项为同一文件创建不同的规范，因此不要依赖引用。Vitest 还可以从 <a href="#getmodulespecifications"><code>vitest.getModuleSpecifications</code></a> 返回缓存的规范 - 缓存基于 <code>moduleId</code> 和 <code>pool</code>。请注意，<a href="/advanced/api/test-project.html#createspecification"><code>project.createSpecification</code></a> 总是返回一个新实例。</p>`,133)),a("h2",F,[i[17]||(i[17]=s("matchesProjectFilter ",-1)),e(n,null,{default:t(()=>i[16]||(i[16]=[s("3.1.0",-1)])),_:1,__:[16]}),i[18]||(i[18]=s()),i[19]||(i[19]=a("a",{class:"header-anchor",href:"#matchesprojectfilter","aria-label":"Permalink to “matchesProjectFilter 3.1.0”"},"​",-1))]),i[47]||(i[47]=l('<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> matchesProjectFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span></code></pre></div><p>检查名称是否与当前 <a href="/guide/cli.html#project">项目过滤器</a> 匹配。如果没有项目过滤器，则始终返回 <code>true</code> 。</p><p>无法通过编程方式更改 <code>--project</code> CLI 选项。</p>',3)),a("h2",u,[i[21]||(i[21]=s("waitForTestRunEnd ",-1)),e(n,null,{default:t(()=>i[20]||(i[20]=[s("4.0.0",-1)])),_:1,__:[20]}),i[22]||(i[22]=s()),i[23]||(i[23]=a("a",{class:"header-anchor",href:"#waitfortestrunend","aria-label":"Permalink to “waitForTestRunEnd 4.0.0”"},"​",-1))]),i[48]||(i[48]=l('<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> waitForTestRunEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>若测试正在运行，则返回一个 Promise ，它会在测试运行完毕后兑现。</p>',2)),a("h2",b,[i[25]||(i[25]=s("createCoverageProvider ",-1)),e(n,null,{default:t(()=>i[24]||(i[24]=[s("4.0.0",-1)])),_:1,__:[24]}),i[26]||(i[26]=s()),i[27]||(i[27]=a("a",{class:"header-anchor",href:"#createcoverageprovider","aria-label":"Permalink to “createCoverageProvider 4.0.0”"},"​",-1))]),i[49]||(i[49]=l('<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCoverageProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoverageProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当配置中启用了 <code>coverage</code> 时，创建覆盖率提供器。若使用 <a href="#start"><code>start</code></a> 或 <a href="#init"><code>init</code></a> 方法启动测试，这一步会自动完成。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>若未将 <a href="/config/#coverage-clean"><code>coverage.clean</code></a> 显式设为 false ，此方法还会清空之前的所有报告。</p></div>',3)),a("h2",f,[i[30]||(i[30]=s("experimental_parseSpecification ",-1)),e(n,null,{default:t(()=>i[28]||(i[28]=[s("4.0.0",-1)])),_:1,__:[28]}),i[31]||(i[31]=s()),e(h,{type:"warning"},{default:t(()=>i[29]||(i[29]=[s("experimental",-1)])),_:1,__:[29]}),i[32]||(i[32]=s()),i[33]||(i[33]=a("a",{class:"header-anchor",href:"#parsespecification","aria-label":"Permalink to “experimental_parseSpecification 4.0.0 experimental”"},"​",-1))]),i[50]||(i[50]=l(`<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> experimental_parseSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  specification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>该函数会收集文件内的所有测试，但不会执行它们。它借助 Vite 的 <code>ssrTransform</code> ，并在其之上使用 rollup 的 <code>parseAst</code> 进行静态分析，从而提取所有可识别的测试用例。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>If Vitest could not analyse the name of the test, it will inject a hidden <code>dynamic: true</code> property to the test or a suite. The <code>id</code> will also have a postfix with <code>-dynamic</code> to not break tests that were collected properly.</p><p>Vitest always injects this property in tests with <code>for</code> or <code>each</code> modifier or tests with a dynamic name (like, <code>hello \${property}</code> or <code>&#39;hello&#39; + \${property}</code>). Vitest will still assign a name to the test, but it cannot be used to filter the tests.</p><p>There is nothing Vitest can do to make it possible to filter dynamic tests, but you can turn a test with <code>for</code> or <code>each</code> modifier into a name pattern with <code>escapeTestName</code> function:</p><p>若 Vitest 无法解析测试名称，它会在测试或套件中注入一个隐藏的 <code>dynamic: true</code> 属性，并在 <code>id</code> 后追加 <code>-dynamic</code> ，以免破坏已正确收集的测试。</p><p>含 <code>for</code> 或 <code>each</code> 修饰符的测试，以及名称动态生成的测试（如 <code>hello \${property}</code> 或 <code>&#39;hello&#39; + \${property}</code> ） ， Vitest 一律会注入此属性。 Vitest 仍会为其分配名称，但该名称无法用于过滤测试。</p><p>Vitest 无法让动态测试支持过滤，但你可以使用 <code>escapeTestName</code> 函数，将带 <code>for</code> 或 <code>each</code> 的测试转换成名称模式：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { escapeTestName } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 转换为 /hello, .+?/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> escapedPattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">escapeTestName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello, %s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>Vitest 只会收集当前文件内定义的测试，绝不会跟随导入去其他文件搜寻。</p><p>无论是否从 <code>vitest</code> 入口点导入， Vitest 都会收集所有 <code>it</code> 、<code>test</code> 、<code>suite</code> 和 <code>describe</code> 的定义。</p></div>`,4)),a("h2",C,[i[36]||(i[36]=s("experimental_parseSpecifications ",-1)),e(n,null,{default:t(()=>i[34]||(i[34]=[s("4.0.0",-1)])),_:1,__:[34]}),i[37]||(i[37]=s()),e(h,{type:"warning"},{default:t(()=>i[35]||(i[35]=[s("实验",-1)])),_:1,__:[35]}),i[38]||(i[38]=s()),i[39]||(i[39]=a("a",{class:"header-anchor",href:"#parsespecifications","aria-label":"Permalink to “experimental_parseSpecifications 4.0.0 实验”"},"​",-1))]),i[51]||(i[51]=l(`<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> experimental_parseSpecifications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  specifications</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSpecification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    concurrency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]&gt;</span></span></code></pre></div><p>该方法会依据规格数组 <a href="#parsespecification">collect tests</a>。</p><p>默认情况下， Vitest 仅同时运行 <code>os.availableParallelism()</code> 个规格，以避免性能骤降。我们可以在第二个参数中指定其他并发数。</p>`,3))])}const R=p(c,[["render",m]]);export{S as __pageData,R as default};
