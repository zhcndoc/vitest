import{_ as i,i as a,o as n,ar as e,aN as t}from"./chunks/framework.lk4jPI36.js";const F=JSON.parse('{"title":"性能测试分析","description":"","frontmatter":{},"headers":[],"relativePath":"guide/profiling-test-performance.md","filePath":"guide/profiling-test-performance.md","lastUpdated":1758986088000}'),l={name:"guide/profiling-test-performance.md"};function p(h,s,k,r,d,g){return n(),a("div",null,s[0]||(s[0]=[e(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/profiling-test-performance.md for this page in Markdown format</div><h1 id="性能测试分析" tabindex="-1">性能测试分析 <a class="header-anchor" href="#性能测试分析" aria-label="Permalink to “性能测试分析”">​</a></h1><p>当你运行 Vitest 时，会显示你的多个时间指标：</p><blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  v2.1.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/prime-number.test.ts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1) 4517ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ✓</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4517ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> passed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Tests</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> passed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  09:32:53</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  4.80s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (transform </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">44ms,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0ms,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> collect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 35ms,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4.52s,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> environment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0ms,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prepare</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 81ms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Time metrics ^^</span></span></code></pre></div></blockquote><ul><li>Transform ：转换文件所用的时间。详见 <a href="#file-transform">文件转换</a>。</li><li>Setup ：执行 <a href="/config/#setupfiles"><code>setupFiles</code></a> 配置文件所花的时间。</li><li>Collect ：收集测试文件中所有用例的时间，包括导入文件依赖的耗时。</li><li>Tests ：实际执行测试用例所用的时间。</li><li>Environment ： <a href="/config/#environment">配置测试</a> 环境（比如 JSDOM ）所需的时间。</li><li>Prepare ： Vitest 用于准备测试运行环境的时间。在 Node 环境下，包括导入并执行内部工具；在浏览器中，还包含初始化 iframe 的时间。</li></ul><h2 id="test-runner" tabindex="-1">Test runner <a class="header-anchor" href="#test-runner" aria-label="Permalink to “Test runner”">​</a></h2><p>当测试执行时间较长的时候，可以生成测试运行器的性能分析报告。可以参考 NodeJS 文档来了解和使用这些选项：</p><ul><li><a href="https://nodejs.org/api/cli.html#--cpu-prof" target="_blank" rel="noreferrer"><code>--cpu-prof</code></a></li><li><a href="https://nodejs.org/api/cli.html#--heap-prof" target="_blank" rel="noreferrer"><code>--heap-prof</code></a></li><li><a href="https://nodejs.org/api/cli.html#--prof" target="_blank" rel="noreferrer"><code>--prof</code></a></li></ul><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>由于 <code>node:worker_threads</code> 的限制， <code>--prof</code> 不能与 <code>pool: &#39;threads&#39;</code> 一起使用。</p></div><p>要将这些选项传递给 Vitest ，可以在 Vitest 的配置中定义 <code>poolOptions.&lt;pool&gt;.execArgv</code>：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-73" id="tab-74" checked><label data-title="Forks" for="tab-74">Forks</label><input type="radio" name="group-73" id="tab-75"><label data-title="Threads" for="tab-75">Threads</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pool: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;forks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    poolOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      forks: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        execArgv: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--cpu-prof&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--cpu-prof-dir=test-runner-profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--heap-prof&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--heap-prof-dir=test-runner-profile&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 生成单一的配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        singleFork: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pool: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;threads&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    poolOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      threads: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        execArgv: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--cpu-prof&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--cpu-prof-dir=test-runner-profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--heap-prof&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;--heap-prof-dir=test-runner-profile&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 生成单一的配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        singleThread: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div></div><p>测试运行后，应该会生成 <code>test-runner-profile/*.cpuprofile</code> 和 <code>test-runner-profile/*.heapprofile</code> 文件。想要知道如何分析这些文件，可以仔细查看<a href="#inspecting-profiling-records">「 检查分析记录 / Inspecting profiling records 」</a>。</p><p>也可以看看<a href="https://github.com/vitest-dev/vitest/tree/main/examples/profiling" target="_blank" rel="noreferrer">性能分析 | 示例</a>。</p><h2 id="main-thread" tabindex="-1">Main thread <a class="header-anchor" href="#main-thread" aria-label="Permalink to “Main thread”">​</a></h2><p>对主线程进行性能分析有助于调试 Vitest 的 Vite 使用情况和 <a href="/config/#globalsetup"><code>globalSetup</code></a> 文件。 这也是 Vite 插件运行的地方。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>可以查看 <a href="https://cn.vitejs.dev/guide/performance" target="_blank" rel="noreferrer">性能 | Vite</a> 以获取更多关于 Vite 特定性能分析的提示。</p><p>我们推荐使用 <a href="https://github.com/antfu-collective/vite-plugin-inspect" target="_blank" rel="noreferrer"><code>vite-plugin-inspect</code></a> 来分析你的 Vite 插件性能。</p></div><p>要执行此操作，需要向运行 Vitest 的 Node 进程传递参数。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cpu-prof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cpu-prof-dir=main-profile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./node_modules/vitest/vitest.mjs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --run</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                  ^^^^^</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#               NodeJS arguments                                           Vitest arguments</span></span></code></pre></div><p>测试运行后会生成一个 <code>main-profile/*.cpuprofile</code> 文件。有关如何分析这些文件的说明，可以查看<a href="#inspecting-profiling-records">检查分析记录</a>。</p><h2 id="file-transform" tabindex="-1">File transform <a class="header-anchor" href="#file-transform" aria-label="Permalink to “File transform”">​</a></h2><p>当测试转换和收集的时间较长时，可以使用环境变量 <code>DEBUG=vite-node:*</code> 来查看哪些文件正在被 <code>vite-node</code> 转换和执行。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEBUG=vite-node:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  v2.1.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:server:request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling/global-setup.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +0ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:client:execute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling/global-setup.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +0ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:server:request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling/test/prime-number.test.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +45ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:client:execute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling/test/prime-number.test.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +26ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:server:request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /src/prime-number.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +9ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:client:execute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling/src/prime-number.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +9ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:server:request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /src/unnecessary-file.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +6ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vite-node:client:execute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling/src/unnecessary-file.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +4ms</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>这种分析策略是识别由<a href="https://cn.vitejs.dev/guide/performance#avoid-barrel-files" target="_blank" rel="noreferrer">「 桶文件 / barrel files 」</a>引起的不必要转换的好方法。如果这些日志包含了在运行测试时不应该加载的文件，你可能有桶文件在不必要地导入文件。</p><p>也可以使用 <a href="/guide/ui.html">Vitest UI</a> 来调试由打包文件引起的缓慢问题。 下面的例子展示了不使用打包文件导入文件可以减少约85%的转换文件数量。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-117" id="tab-118" checked><label data-title="File tree" for="tab-118">File tree</label><input type="radio" name="group-117" id="tab-119"><label data-title="example.test.ts" for="tab-119">example.test.ts</label></div><div class="blocks"><div class="language- active"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>├── src</span></span>
<span class="line"><span>│   └── utils</span></span>
<span class="line"><span>│       ├── currency.ts</span></span>
<span class="line"><span>│       ├── formatters.ts  &lt;-- File to test</span></span>
<span class="line"><span>│       ├── index.ts</span></span>
<span class="line"><span>│       ├── location.ts</span></span>
<span class="line"><span>│       ├── math.ts</span></span>
<span class="line"><span>│       ├── time.ts</span></span>
<span class="line"><span>│       └── users.ts</span></span>
<span class="line"><span>├── test</span></span>
<span class="line"><span>│   └── formatters.test.ts</span></span>
<span class="line"><span>└── vitest.config.ts</span></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark has-diff" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { expect, test } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest&#39;</span></span>
<span class="line diff remove"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../src/utils&#39;</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { formatter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../src/utils/formatters&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;formatter works&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formatter).not.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div></div><img src="`+t+`" alt="Vitest UI demonstrating barrel file issues"><p>要查看文件是如何转换的，可以使用 <code>VITE_NODE_DEBUG_DUMP</code> 环境变量将转换后的文件写入文件系统：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VITE_NODE_DEBUG_DUMP=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --run</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[vite-node] [debug] dump modules to /x/examples/profiling/.vite-node/dump</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  v2.1.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest/examples/profiling</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .vite-node/dump/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_x_examples_profiling_global-setup_ts-1292904907.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_x_examples_profiling_test_prime-number_test_ts-1413378098.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_src_prime-number_ts-525172412.js</span></span></code></pre></div><h2 id="code-coverage" tabindex="-1">Code coverage <a class="header-anchor" href="#code-coverage" aria-label="Permalink to “Code coverage”">​</a></h2><p>If code coverage generation is slow on your project you can use <code>DEBUG=vitest:coverage</code> environment variable to enable performance logging.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark has-highlighted" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEBUG=vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vitest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --coverage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RUN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  v3.1.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/vitest-example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Reading</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> results</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2/2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Converting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1/2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/src/multiply.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Converting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2/2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 552</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/src/add.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Uncovered</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1/2</span></span>
<span class="line highlighted error"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> File</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/x/src/large-file.ts&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taking</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> longer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> than</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3027</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/src/large-file.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Uncovered</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2/2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /x/src/untested-file.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  vitest:coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Generate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3521</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ms</span></span></code></pre></div><p>This profiling approach is great for detecting large files that are accidentally picked by coverage providers. For example if your configuration is accidentally including large built minified Javascript files in code coverage, they should appear in logs. In these cases you might want to adjust your <a href="/config/#coverage-include"><code>coverage.include</code></a> and <a href="/config/#coverage-exclude"><code>coverage.exclude</code></a> options.</p><h2 id="inspecting-profiling-records" tabindex="-1">Inspecting profiling records <a class="header-anchor" href="#inspecting-profiling-records" aria-label="Permalink to “Inspecting profiling records”">​</a></h2><p>可以使用各种工具检查 <code>*.cpuprofile</code> 和 <code>*.heapprofile</code> 的内容。下面是一些示例。</p><ul><li><a href="https://www.speedscope.app/" target="_blank" rel="noreferrer">Speedscope</a></li><li><a href="https://code.visualstudio.com/docs/nodejs/profiling#_analyzing-a-profile" target="_blank" rel="noreferrer">在 Visual Studio Code 中对 JavaScript 进行性能分析</a></li><li><a href="https://developer.chrome.com/docs/devtools/performance/nodejs#analyze" target="_blank" rel="noreferrer">使用性能面板分析 Node.js 性能 | developer.chrome.com</a></li><li><a href="https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots#view_snapshots" target="_blank" rel="noreferrer">内存面板概览 | developer.chrome.com</a></li></ul>`,35)]))}const c=i(l,[["render",p]]);export{F as __pageData,c as default};
