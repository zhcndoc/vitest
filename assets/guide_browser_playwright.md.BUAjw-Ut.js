import{_ as p}from"./chunks/theme.DgHYi77D.js";import{_ as r,i as h,o,ar as t,j as a,M as i,g as n,w as l}from"./chunks/framework.lk4jPI36.js";const w=JSON.parse('{"title":"配置 Playwright","description":"","frontmatter":{},"headers":[],"relativePath":"guide/browser/playwright.md","filePath":"guide/browser/playwright.md","lastUpdated":1758986088000}'),d={name:"guide/browser/playwright.md"},k={id:"connect",tabindex:"-1"},c={id:"actiontimeout-3-0-0",tabindex:"-1"};function g(E,s,y,b,u,v){const e=p;return o(),h("div",null,[s[9]||(s[9]=t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/browser/playwright.md for this page in Markdown format</div><h1 id="配置-playwright" tabindex="-1">配置 Playwright <a class="header-anchor" href="#配置-playwright" aria-label="Permalink to “配置 Playwright”">​</a></h1><p>默认情况下，TypeScript 无法识别提供者选项和额外的 <code>expect</code> 属性。请确保引用 <code>@vitest/browser/providers/playwright</code>，以便 TypeScript 可以获取自定义选项的定义：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vitest.shims.d.ts">vitest.shims.d.ts</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/playwright&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /&gt;</span></span></code></pre></div></div><p>或者，我们也可以将其添加到 <code>tsconfig.json</code> 文件中的 <code>compilerOptions.types</code> 字段。请注意，在此字段中指定任何内容将禁用 <code>@types/*</code> 包的 <a href="https://www.typescriptlang.org/tsconfig/#types" target="_blank" rel="noreferrer">自动加载</a>。</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="tsconfig.json">tsconfig.json</span></div><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@vitest/browser/providers/playwright&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>Vitest 会在一个页面中执行同一文件里的所有测试。你可以通过 instances 配置项中的 <code>launch</code> 、<code>connect</code> 和 <code>context</code> 属性来自定义行为：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vitest.config.ts">vitest.config.ts</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitest/config&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          browser: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;firefox&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          launch: {},</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          connect: {},</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          context: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>在 Vitest 3 之前，这些选项位于 <code>test.browser.providerOptions</code> 属性中：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="vitest.config.ts">vitest.config.ts</span></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  test: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    browser: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      providerOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        launch: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        context: {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></div><p><code>providerOptions</code> 已被弃用，推荐使用 <code>instances</code>。</p></div><h2 id="launch" tabindex="-1">launch <a class="header-anchor" href="#launch" aria-label="Permalink to “launch”">​</a></h2><p>这些选项直接传递给 <code>playwright[browser].launch</code> 命令。我们可以在 <a href="https://playwright.dev/docs/api/class-browsertype#browser-type-launch" target="_blank" rel="noreferrer">Playwright 文档</a> 中阅读有关该命令和可用参数的更多信息。</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>Vitest 将忽略 <code>launch.headless</code> 选项。请改用 <a href="/guide/browser/config.html#browser-headless"><code>test.browser.headless</code></a>。</p><p>请注意，如果启用了 <a href="/guide/cli.html#inspect"><code>--inspect</code></a>，Vitest 会将调试标志推送到 <code>launch.args</code>。</p></div>`,12)),a("h2",k,[s[1]||(s[1]=i("connect ",-1)),n(e,null,{default:l(()=>s[0]||(s[0]=[i("3.2.0",-1)])),_:1,__:[0]}),s[2]||(s[2]=i()),s[3]||(s[3]=a("a",{class:"header-anchor",href:"#connect","aria-label":"Permalink to “connect 3.2.0”"},"​",-1))]),s[10]||(s[10]=t('<p>These options are directly passed down to <code>playwright[browser].connect</code> command. You can read more about the command and available arguments in the <a href="https://playwright.dev/docs/api/class-browsertype#browser-type-connect" target="_blank" rel="noreferrer">Playwright documentation</a>.</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>Since this command connects to an existing Playwright server, any <code>launch</code> options will be ignored.</p></div><h2 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to “context”">​</a></h2><p>Vitest 通过调用 <a href="https://playwright.dev/docs/api/class-browsercontext" target="_blank" rel="noreferrer"><code>browser.newContext()</code></a> 为每个测试文件创建一个新的上下文。我们可以通过指定 <a href="https://playwright.dev/docs/api/class-apirequest#api-request-new-context" target="_blank" rel="noreferrer">自定义参数</a> 来配置此行为。</p><div class="tip custom-block"><p class="custom-block-title custom-block-title-default">TIP</p><p>请注意，上下文是为每个 <em>测试文件</em> 创建的，而不是像 Playwright 测试运行器那样为每个 <em>测试</em> 创建。</p></div><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>如果我们的服务器通过 HTTPS 提供服务，Vitest 始终将 <code>ignoreHTTPSErrors</code> 设置为 <code>true</code>，并将 <code>serviceWorkers</code> 设置为 <code>&#39;allow&#39;</code>，以支持通过 <a href="https://mswjs.io" target="_blank" rel="noreferrer">MSW</a> 进行模块模拟。</p><p>建议使用 <a href="/guide/browser/config.html#browser-headless"><code>test.browser.viewport</code></a> 而不是在此处指定它，因为在无头模式下运行测试时会丢失该设置。</p></div>',6)),a("h2",c,[s[5]||(s[5]=a("code",null,"actionTimeout",-1)),s[6]||(s[6]=i()),n(e,null,{default:l(()=>s[4]||(s[4]=[i("3.0.0",-1)])),_:1,__:[4]}),s[7]||(s[7]=i()),s[8]||(s[8]=a("a",{class:"header-anchor",href:"#actiontimeout-3-0-0","aria-label":"Permalink to “actionTimeout 3.0.0”"},"​",-1))]),s[11]||(s[11]=t(`<ul><li><strong>默认值：</strong> 无超时，3.0.0 之前为 1 秒</li></ul><p>此值配置 Playwright 等待所有可访问性检查通过并 <a href="/guide/browser/interactivity-api.html">操作</a> 实际完成的默认超时时间。</p><p>我们还可以为每个操作配置操作超时：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { page, userEvent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@vitest/browser/context&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userEvent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByRole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,4))])}const _=r(d,[["render",g]]);export{w as __pageData,_ as default};
